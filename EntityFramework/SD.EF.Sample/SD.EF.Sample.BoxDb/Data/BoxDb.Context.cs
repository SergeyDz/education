//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SD.EF.Sample.BoxDb.Data
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class Flow_Stikeman_LiveEntities : DbContext
    {
        public Flow_Stikeman_LiveEntities()
            : base("name=Flow_Stikeman_LiveEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<AddressType> AddressType { get; set; }
        public virtual DbSet<AnalystNoteType> AnalystNoteType { get; set; }
        public virtual DbSet<ApplicationDomain> ApplicationDomain { get; set; }
        public virtual DbSet<Attachment> Attachment { get; set; }
        public virtual DbSet<Attorney> Attorney { get; set; }
        public virtual DbSet<AttorneyPartnerType> AttorneyPartnerType { get; set; }
        public virtual DbSet<AttorneyPitchStatus> AttorneyPitchStatus { get; set; }
        public virtual DbSet<AttorneyPitchType> AttorneyPitchType { get; set; }
        public virtual DbSet<AttorneyRole> AttorneyRole { get; set; }
        public virtual DbSet<AttorneyStatus> AttorneyStatus { get; set; }
        public virtual DbSet<AttorneyType> AttorneyType { get; set; }
        public virtual DbSet<BillFrequency> BillFrequency { get; set; }
        public virtual DbSet<BillRange> BillRange { get; set; }
        public virtual DbSet<BillRate> BillRate { get; set; }
        public virtual DbSet<Calendar> Calendar { get; set; }
        public virtual DbSet<Classification> Classification { get; set; }
        public virtual DbSet<ClientMatterCloseNote> ClientMatterCloseNote { get; set; }
        public virtual DbSet<ClientType> ClientType { get; set; }
        public virtual DbSet<COIReportType> COIReportType { get; set; }
        public virtual DbSet<CommentType> CommentType { get; set; }
        public virtual DbSet<Config> Config { get; set; }
        public virtual DbSet<ContactOwnerType> ContactOwnerType { get; set; }
        public virtual DbSet<ContactType> ContactType { get; set; }
        public virtual DbSet<DataSources> DataSources { get; set; }
        public virtual DbSet<DataType> DataType { get; set; }
        public virtual DbSet<DateType> DateType { get; set; }
        public virtual DbSet<Department> Department { get; set; }
        public virtual DbSet<Dictionary> Dictionary { get; set; }
        public virtual DbSet<DictionaryType> DictionaryType { get; set; }
        public virtual DbSet<DITAction> DITAction { get; set; }
        public virtual DbSet<DITType> DITType { get; set; }
        public virtual DbSet<Document> Document { get; set; }
        public virtual DbSet<DocumentInstance> DocumentInstance { get; set; }
        public virtual DbSet<DocumentType> DocumentType { get; set; }
        public virtual DbSet<DomainModel> DomainModel { get; set; }
        public virtual DbSet<Encryption> Encryption { get; set; }
        public virtual DbSet<EntityType> EntityType { get; set; }
        public virtual DbSet<EventLog> EventLog { get; set; }
        public virtual DbSet<EventSeverity> EventSeverity { get; set; }
        public virtual DbSet<EventType> EventType { get; set; }
        public virtual DbSet<Gender> Gender { get; set; }
        public virtual DbSet<Group> Group { get; set; }
        public virtual DbSet<Integration> Integration { get; set; }
        public virtual DbSet<IntegrationConfig> IntegrationConfig { get; set; }
        public virtual DbSet<IntegrationTemplate> IntegrationTemplate { get; set; }
        public virtual DbSet<IntegrationType> IntegrationType { get; set; }
        public virtual DbSet<Jurisdiction> Jurisdiction { get; set; }
        public virtual DbSet<Locale> Locale { get; set; }
        public virtual DbSet<MatterType> MatterType { get; set; }
        public virtual DbSet<Message> Message { get; set; }
        public virtual DbSet<MessageOffice> MessageOffice { get; set; }
        public virtual DbSet<MimeType> MimeType { get; set; }
        public virtual DbSet<ModelProperty> ModelProperty { get; set; }
        public virtual DbSet<NameHonorific> NameHonorific { get; set; }
        public virtual DbSet<NamePrefix> NamePrefix { get; set; }
        public virtual DbSet<NameSuffix> NameSuffix { get; set; }
        public virtual DbSet<NotifyRule> NotifyRule { get; set; }
        public virtual DbSet<Parameter> Parameter { get; set; }
        public virtual DbSet<ParameterCategory> ParameterCategory { get; set; }
        public virtual DbSet<ParameterValue> ParameterValue { get; set; }
        public virtual DbSet<PartyPosition> PartyPosition { get; set; }
        public virtual DbSet<PartyRelation> PartyRelation { get; set; }
        public virtual DbSet<PartyRole> PartyRole { get; set; }
        public virtual DbSet<Permission> Permission { get; set; }
        public virtual DbSet<PermissionResource> PermissionResource { get; set; }
        public virtual DbSet<PermissionSet> PermissionSet { get; set; }
        public virtual DbSet<PermissionType> PermissionType { get; set; }
        public virtual DbSet<PropertyType> PropertyType { get; set; }
        public virtual DbSet<PropertyValue> PropertyValue { get; set; }
        public virtual DbSet<ReferralSource> ReferralSource { get; set; }
        public virtual DbSet<Resource> Resource { get; set; }
        public virtual DbSet<ResourceType> ResourceType { get; set; }
        public virtual DbSet<Role> Role { get; set; }
        public virtual DbSet<RolePermission> RolePermission { get; set; }
        public virtual DbSet<Rule> Rule { get; set; }
        public virtual DbSet<RuleSet> RuleSet { get; set; }
        public virtual DbSet<RuleType> RuleType { get; set; }
        public virtual DbSet<Scope> Scope { get; set; }
        public virtual DbSet<SearchRequestTermSource> SearchRequestTermSource { get; set; }
        public virtual DbSet<StandardPartyAlertType> StandardPartyAlertType { get; set; }
        public virtual DbSet<StandardPartyStatus> StandardPartyStatus { get; set; }
        public virtual DbSet<State> State { get; set; }
        public virtual DbSet<Task> Task { get; set; }
        public virtual DbSet<TaskHandler> TaskHandler { get; set; }
        public virtual DbSet<TaskStatus> TaskStatus { get; set; }
        public virtual DbSet<User> User { get; set; }
        public virtual DbSet<UserContact> UserContact { get; set; }
        public virtual DbSet<UserGroup> UserGroup { get; set; }
        public virtual DbSet<UserGroupCriteria> UserGroupCriteria { get; set; }
        public virtual DbSet<UserGroupMembership> UserGroupMembership { get; set; }
        public virtual DbSet<UserGroupRole> UserGroupRole { get; set; }
        public virtual DbSet<UserRole> UserRole { get; set; }
        public virtual DbSet<UserStatus> UserStatus { get; set; }
        public virtual DbSet<WaiverCondition> WaiverCondition { get; set; }
        public virtual DbSet<WaiverOwnerType> WaiverOwnerType { get; set; }
        public virtual DbSet<AddressType1> AddressType1 { get; set; }
        public virtual DbSet<BillFrequency1> BillFrequency1 { get; set; }
        public virtual DbSet<BillRate1> BillRate1 { get; set; }
        public virtual DbSet<Department1> Department1 { get; set; }
        public virtual DbSet<Jurisdiction1> Jurisdiction1 { get; set; }
        public virtual DbSet<Locale1> Locale1 { get; set; }
        public virtual DbSet<MatterType1> MatterType1 { get; set; }
        public virtual DbSet<ReferralSource1> ReferralSource1 { get; set; }
        public virtual DbSet<State1> State1 { get; set; }
        public virtual DbSet<EntityScoreByDateSource> EntityScoreByDateSource { get; set; }
        public virtual DbSet<SearchRequest> SearchRequest { get; set; }
        public virtual DbSet<SearchRequestTerm> SearchRequestTerm { get; set; }
        public virtual DbSet<SearchResult_COI> SearchResult_COI { get; set; }
        public virtual DbSet<sysdiagrams> sysdiagrams { get; set; }
        public virtual DbSet<Address> Address { get; set; }
        public virtual DbSet<AddressOwner> AddressOwner { get; set; }
        public virtual DbSet<AddressOwnerType> AddressOwnerType { get; set; }
        public virtual DbSet<AddressType2> AddressType2 { get; set; }
        public virtual DbSet<AlertType> AlertType { get; set; }
        public virtual DbSet<AliasType> AliasType { get; set; }
        public virtual DbSet<Attorney1> Attorney1 { get; set; }
        public virtual DbSet<AttorneyAlert> AttorneyAlert { get; set; }
        public virtual DbSet<AttorneyComment> AttorneyComment { get; set; }
        public virtual DbSet<AttorneyStatus1> AttorneyStatus1 { get; set; }
        public virtual DbSet<AttorneyType1> AttorneyType1 { get; set; }
        public virtual DbSet<BillingFrequency> BillingFrequency { get; set; }
        public virtual DbSet<BillingRate> BillingRate { get; set; }
        public virtual DbSet<Calendar1> Calendar1 { get; set; }
        public virtual DbSet<City> City { get; set; }
        public virtual DbSet<Classification1> Classification1 { get; set; }
        public virtual DbSet<Client> Client { get; set; }
        public virtual DbSet<ClientAlert> ClientAlert { get; set; }
        public virtual DbSet<ClientAttorney> ClientAttorney { get; set; }
        public virtual DbSet<ClientComment> ClientComment { get; set; }
        public virtual DbSet<ClientGroup> ClientGroup { get; set; }
        public virtual DbSet<ClientInternalRelation> ClientInternalRelation { get; set; }
        public virtual DbSet<ClientInternalStatus> ClientInternalStatus { get; set; }
        public virtual DbSet<ClientMatrix> ClientMatrix { get; set; }
        public virtual DbSet<ClientRelation> ClientRelation { get; set; }
        public virtual DbSet<ClientStatus> ClientStatus { get; set; }
        public virtual DbSet<ClientStatusNote> ClientStatusNote { get; set; }
        public virtual DbSet<ClientType1> ClientType1 { get; set; }
        public virtual DbSet<CommentType1> CommentType1 { get; set; }
        public virtual DbSet<Contact> Contact { get; set; }
        public virtual DbSet<ContactOwner> ContactOwner { get; set; }
        public virtual DbSet<ContactOwnerType1> ContactOwnerType1 { get; set; }
        public virtual DbSet<ContactType1> ContactType1 { get; set; }
        public virtual DbSet<CorporateTree> CorporateTree { get; set; }
        public virtual DbSet<CorporateTreeHierarchy> CorporateTreeHierarchy { get; set; }
        public virtual DbSet<Country> Country { get; set; }
        public virtual DbSet<CountryCurrency> CountryCurrency { get; set; }
        public virtual DbSet<CountryState> CountryState { get; set; }
        public virtual DbSet<Currency> Currency { get; set; }
        public virtual DbSet<Department2> Department2 { get; set; }
        public virtual DbSet<DITDistributionList> DITDistributionList { get; set; }
        public virtual DbSet<DITEmail> DITEmail { get; set; }
        public virtual DbSet<Gender1> Gender1 { get; set; }
        public virtual DbSet<HonorificName> HonorificName { get; set; }
        public virtual DbSet<Industry> Industry { get; set; }
        public virtual DbSet<JobPosition> JobPosition { get; set; }
        public virtual DbSet<JobTitle> JobTitle { get; set; }
        public virtual DbSet<MaritalStatus> MaritalStatus { get; set; }
        public virtual DbSet<Matter> Matter { get; set; }
        public virtual DbSet<MatterAlert> MatterAlert { get; set; }
        public virtual DbSet<MatterAnalystNote> MatterAnalystNote { get; set; }
        public virtual DbSet<MatterAttachment> MatterAttachment { get; set; }
        public virtual DbSet<MatterAttorney> MatterAttorney { get; set; }
        public virtual DbSet<MatterBill> MatterBill { get; set; }
        public virtual DbSet<MatterComment> MatterComment { get; set; }
        public virtual DbSet<MatterCountry> MatterCountry { get; set; }
        public virtual DbSet<MatterDate> MatterDate { get; set; }
        public virtual DbSet<MatterDIT> MatterDIT { get; set; }
        public virtual DbSet<MatterGroup> MatterGroup { get; set; }
        public virtual DbSet<MatterInternalRelation> MatterInternalRelation { get; set; }
        public virtual DbSet<MatterInternalStatus> MatterInternalStatus { get; set; }
        public virtual DbSet<MatterMatrix> MatterMatrix { get; set; }
        public virtual DbSet<MatterReference> MatterReference { get; set; }
        public virtual DbSet<MatterRelation> MatterRelation { get; set; }
        public virtual DbSet<MatterStatus> MatterStatus { get; set; }
        public virtual DbSet<MatterStatusNote> MatterStatusNote { get; set; }
        public virtual DbSet<MatterType2> MatterType2 { get; set; }
        public virtual DbSet<Office> Office { get; set; }
        public virtual DbSet<OrganizationLevel> OrganizationLevel { get; set; }
        public virtual DbSet<OrganizationUnit> OrganizationUnit { get; set; }
        public virtual DbSet<PartnerType> PartnerType { get; set; }
        public virtual DbSet<PartyIndustryType> PartyIndustryType { get; set; }
        public virtual DbSet<PartyInternalPosition> PartyInternalPosition { get; set; }
        public virtual DbSet<PartyInternalRelation> PartyInternalRelation { get; set; }
        public virtual DbSet<PartyMatrix> PartyMatrix { get; set; }
        public virtual DbSet<PartyPosition1> PartyPosition1 { get; set; }
        public virtual DbSet<PartyRelation1> PartyRelation1 { get; set; }
        public virtual DbSet<PartyTree> PartyTree { get; set; }
        public virtual DbSet<PartyType> PartyType { get; set; }
        public virtual DbSet<Person> Person { get; set; }
        public virtual DbSet<PersonAlias> PersonAlias { get; set; }
        public virtual DbSet<PersonStatus> PersonStatus { get; set; }
        public virtual DbSet<Pitch> Pitch { get; set; }
        public virtual DbSet<PitchAttorneyRole> PitchAttorneyRole { get; set; }
        public virtual DbSet<PitchParty> PitchParty { get; set; }
        public virtual DbSet<PitchSearchLog> PitchSearchLog { get; set; }
        public virtual DbSet<Practice> Practice { get; set; }
        public virtual DbSet<PracticeCode> PracticeCode { get; set; }
        public virtual DbSet<PrefixName> PrefixName { get; set; }
        public virtual DbSet<ReferralSource2> ReferralSource2 { get; set; }
        public virtual DbSet<Region> Region { get; set; }
        public virtual DbSet<RelatedParty> RelatedParty { get; set; }
        public virtual DbSet<RelatedPartyAlert> RelatedPartyAlert { get; set; }
        public virtual DbSet<RelatedPartyComment> RelatedPartyComment { get; set; }
        public virtual DbSet<StandardParty> StandardParty { get; set; }
        public virtual DbSet<StandardPartyAlert> StandardPartyAlert { get; set; }
        public virtual DbSet<StandardPartyAlias> StandardPartyAlias { get; set; }
        public virtual DbSet<StandardPartyComment> StandardPartyComment { get; set; }
        public virtual DbSet<StandardPartyIndustry> StandardPartyIndustry { get; set; }
        public virtual DbSet<StandardPartyLink> StandardPartyLink { get; set; }
        public virtual DbSet<StandardPartyStatus1> StandardPartyStatus1 { get; set; }
        public virtual DbSet<SuffixName> SuffixName { get; set; }
        public virtual DbSet<Waiver> Waiver { get; set; }
        public virtual DbSet<WaiverOwner> WaiverOwner { get; set; }
        public virtual DbSet<Country1> Country1 { get; set; }
        public virtual DbSet<Currency1> Currency1 { get; set; }
        public virtual DbSet<Department3> Department3 { get; set; }
        public virtual DbSet<Industry1> Industry1 { get; set; }
        public virtual DbSet<Office1> Office1 { get; set; }
        public virtual DbSet<OrganizationLevel1> OrganizationLevel1 { get; set; }
        public virtual DbSet<PartyPosition2> PartyPosition2 { get; set; }
        public virtual DbSet<PartyRelation2> PartyRelation2 { get; set; }
        public virtual DbSet<Practice1> Practice1 { get; set; }
        public virtual DbSet<PracticeCode1> PracticeCode1 { get; set; }
        public virtual DbSet<ActionLog> ActionLog { get; set; }
        public virtual DbSet<Address1> Address1 { get; set; }
        public virtual DbSet<Answer> Answer { get; set; }
        public virtual DbSet<AnswerOption> AnswerOption { get; set; }
        public virtual DbSet<Attachment1> Attachment1 { get; set; }
        public virtual DbSet<AttachmentType> AttachmentType { get; set; }
        public virtual DbSet<BillingDetail> BillingDetail { get; set; }
        public virtual DbSet<Client1> Client1 { get; set; }
        public virtual DbSet<ClientStatus1> ClientStatus1 { get; set; }
        public virtual DbSet<ClientType2> ClientType2 { get; set; }
        public virtual DbSet<Contact1> Contact1 { get; set; }
        public virtual DbSet<ContactOwner1> ContactOwner1 { get; set; }
        public virtual DbSet<GenericEntity> GenericEntity { get; set; }
        public virtual DbSet<GenericEntityType> GenericEntityType { get; set; }
        public virtual DbSet<Matter1> Matter1 { get; set; }
        public virtual DbSet<Party> Party { get; set; }
        public virtual DbSet<Question> Question { get; set; }
        public virtual DbSet<Questionnaire> Questionnaire { get; set; }
        public virtual DbSet<QuestionnaireInstance> QuestionnaireInstance { get; set; }
        public virtual DbSet<Request> Request { get; set; }
        public virtual DbSet<RequestStatus> RequestStatus { get; set; }
        public virtual DbSet<RequestType> RequestType { get; set; }
        public virtual DbSet<RequestUser> RequestUser { get; set; }
        public virtual DbSet<Address2> Address2 { get; set; }
        public virtual DbSet<AlertPublication> AlertPublication { get; set; }
        public virtual DbSet<AlertPublicationType> AlertPublicationType { get; set; }
        public virtual DbSet<AreaIndustry> AreaIndustry { get; set; }
        public virtual DbSet<AttorneyRelationship> AttorneyRelationship { get; set; }
        public virtual DbSet<BillFormat> BillFormat { get; set; }
        public virtual DbSet<BillingArrangement> BillingArrangement { get; set; }
        public virtual DbSet<BlistClient> BlistClient { get; set; }
        public virtual DbSet<BusinessIntelligence> BusinessIntelligence { get; set; }
        public virtual DbSet<BusinessIntelligenceType> BusinessIntelligenceType { get; set; }
        public virtual DbSet<Client2> Client2 { get; set; }
        public virtual DbSet<ClientAlias> ClientAlias { get; set; }
        public virtual DbSet<ClientGroup1> ClientGroup1 { get; set; }
        public virtual DbSet<ClientType3> ClientType3 { get; set; }
        public virtual DbSet<Comment> Comment { get; set; }
        public virtual DbSet<CommentType2> CommentType2 { get; set; }
        public virtual DbSet<ConflictSearch> ConflictSearch { get; set; }
        public virtual DbSet<ConflictsResult> ConflictsResult { get; set; }
        public virtual DbSet<CostOverride> CostOverride { get; set; }
        public virtual DbSet<CostOverridesType> CostOverridesType { get; set; }
        public virtual DbSet<DeadlineType> DeadlineType { get; set; }
        public virtual DbSet<DisbRate> DisbRate { get; set; }
        public virtual DbSet<Division> Division { get; set; }
        public virtual DbSet<EbillingVendorType> EbillingVendorType { get; set; }
        public virtual DbSet<EngagementLetterDeviation> EngagementLetterDeviation { get; set; }
        public virtual DbSet<EngagementLetterReason> EngagementLetterReason { get; set; }
        public virtual DbSet<EngagementLetterStatus> EngagementLetterStatus { get; set; }
        public virtual DbSet<EngagementLetterType> EngagementLetterType { get; set; }
        public virtual DbSet<EntityType1> EntityType1 { get; set; }
        public virtual DbSet<ExceptionHandlingMessage> ExceptionHandlingMessage { get; set; }
        public virtual DbSet<ExceptionHandlingRule> ExceptionHandlingRule { get; set; }
        public virtual DbSet<ExceptionHandlingTrace> ExceptionHandlingTrace { get; set; }
        public virtual DbSet<ExceptionHandlingType> ExceptionHandlingType { get; set; }
        public virtual DbSet<FeesArrangement> FeesArrangement { get; set; }
        public virtual DbSet<FeesRetainerType> FeesRetainerType { get; set; }
        public virtual DbSet<FeesSpecialArrangement> FeesSpecialArrangement { get; set; }
        public virtual DbSet<FeesType> FeesType { get; set; }
        public virtual DbSet<KYCVDirector> KYCVDirector { get; set; }
        public virtual DbSet<KYCVShareholder> KYCVShareholder { get; set; }
        public virtual DbSet<LegalTopic> LegalTopic { get; set; }
        public virtual DbSet<MarketingActivity> MarketingActivity { get; set; }
        public virtual DbSet<MarketingType> MarketingType { get; set; }
        public virtual DbSet<Matter2> Matter2 { get; set; }
        public virtual DbSet<MatterCategory> MatterCategory { get; set; }
        public virtual DbSet<MatterNature> MatterNature { get; set; }
        public virtual DbSet<MatterPractice> MatterPractice { get; set; }
        public virtual DbSet<MatterStatus1> MatterStatus1 { get; set; }
        public virtual DbSet<OwnershipType> OwnershipType { get; set; }
        public virtual DbSet<Party1> Party1 { get; set; }
        public virtual DbSet<Person1> Person1 { get; set; }
        public virtual DbSet<PrebillFormat> PrebillFormat { get; set; }
        public virtual DbSet<Referrer> Referrer { get; set; }
        public virtual DbSet<ReferrerType> ReferrerType { get; set; }
        public virtual DbSet<RefferBy> RefferBy { get; set; }
        public virtual DbSet<Request1> Request1 { get; set; }
        public virtual DbSet<RequestUser1> RequestUser1 { get; set; }
        public virtual DbSet<RequestUserType> RequestUserType { get; set; }
        public virtual DbSet<ResponsbilityType> ResponsbilityType { get; set; }
        public virtual DbSet<RolePersonnelType> RolePersonnelType { get; set; }
        public virtual DbSet<TaxJurisdiction> TaxJurisdiction { get; set; }
        public virtual DbSet<TypeOfBusiness> TypeOfBusiness { get; set; }
        public virtual DbSet<AlertPublicationType1> AlertPublicationType1 { get; set; }
        public virtual DbSet<AreaIndustry1> AreaIndustry1 { get; set; }
        public virtual DbSet<AttorneyRelationship1> AttorneyRelationship1 { get; set; }
        public virtual DbSet<BillFormat1> BillFormat1 { get; set; }
        public virtual DbSet<BillingArrangement1> BillingArrangement1 { get; set; }
        public virtual DbSet<CommentType3> CommentType3 { get; set; }
        public virtual DbSet<CostOverridesType1> CostOverridesType1 { get; set; }
        public virtual DbSet<DeadlineType1> DeadlineType1 { get; set; }
        public virtual DbSet<DisbRate1> DisbRate1 { get; set; }
        public virtual DbSet<Division1> Division1 { get; set; }
        public virtual DbSet<EbillingVendorType1> EbillingVendorType1 { get; set; }
        public virtual DbSet<EngagementLetterDeviation1> EngagementLetterDeviation1 { get; set; }
        public virtual DbSet<EngagementLetterReason1> EngagementLetterReason1 { get; set; }
        public virtual DbSet<EngagementLetterStatus1> EngagementLetterStatus1 { get; set; }
        public virtual DbSet<EngagementLetterType1> EngagementLetterType1 { get; set; }
        public virtual DbSet<EntityType2> EntityType2 { get; set; }
        public virtual DbSet<FeesArrangement1> FeesArrangement1 { get; set; }
        public virtual DbSet<FeesRetainerType1> FeesRetainerType1 { get; set; }
        public virtual DbSet<FeesSpecialArrangement1> FeesSpecialArrangement1 { get; set; }
        public virtual DbSet<FeesType1> FeesType1 { get; set; }
        public virtual DbSet<LegalTopic1> LegalTopic1 { get; set; }
        public virtual DbSet<MarketingActivity1> MarketingActivity1 { get; set; }
        public virtual DbSet<MarketingType1> MarketingType1 { get; set; }
        public virtual DbSet<MatterCategory1> MatterCategory1 { get; set; }
        public virtual DbSet<MatterNature1> MatterNature1 { get; set; }
        public virtual DbSet<MatterStatus2> MatterStatus2 { get; set; }
        public virtual DbSet<OwnershipType1> OwnershipType1 { get; set; }
        public virtual DbSet<PrebillFormat1> PrebillFormat1 { get; set; }
        public virtual DbSet<ReferrerType1> ReferrerType1 { get; set; }
        public virtual DbSet<RefferBy1> RefferBy1 { get; set; }
        public virtual DbSet<RequestUserType1> RequestUserType1 { get; set; }
        public virtual DbSet<ResponsbilityType1> ResponsbilityType1 { get; set; }
        public virtual DbSet<TaxJurisdiction1> TaxJurisdiction1 { get; set; }
        public virtual DbSet<TypeOfBusiness1> TypeOfBusiness1 { get; set; }
        public virtual DbSet<BillFormat2> BillFormat2 { get; set; }
        public virtual DbSet<ClientStatus2> ClientStatus2 { get; set; }
        public virtual DbSet<RequestType1> RequestType1 { get; set; }
        public virtual DbSet<Acknowledgement> Acknowledgement { get; set; }
        public virtual DbSet<AnswerStatus> AnswerStatus { get; set; }
        public virtual DbSet<Attachment2> Attachment2 { get; set; }
        public virtual DbSet<ClientMatter> ClientMatter { get; set; }
        public virtual DbSet<Collection> Collection { get; set; }
        public virtual DbSet<CollectionStatus> CollectionStatus { get; set; }
        public virtual DbSet<CollectionTimeUnit> CollectionTimeUnit { get; set; }
        public virtual DbSet<Hold> Hold { get; set; }
        public virtual DbSet<HoldSilo> HoldSilo { get; set; }
        public virtual DbSet<HoldStatus> HoldStatus { get; set; }
        public virtual DbSet<HoldType> HoldType { get; set; }
        public virtual DbSet<InterviewAnswer> InterviewAnswer { get; set; }
        public virtual DbSet<InterviewTemplate> InterviewTemplate { get; set; }
        public virtual DbSet<SiloCustodian> SiloCustodian { get; set; }
        public virtual DbSet<SiloDataSteward> SiloDataSteward { get; set; }
        public virtual DbSet<SiloOrgUnit> SiloOrgUnit { get; set; }
        public virtual DbSet<SiloQuestion> SiloQuestion { get; set; }
        public virtual DbSet<SiloType> SiloType { get; set; }
        public virtual DbSet<Stakeholder> Stakeholder { get; set; }
        public virtual DbSet<StakeholderByType> StakeholderByType { get; set; }
        public virtual DbSet<StandardSilo> StandardSilo { get; set; }
        public virtual DbSet<StandardSiloCustodian> StandardSiloCustodian { get; set; }
        public virtual DbSet<StandardSiloDataSteward> StandardSiloDataSteward { get; set; }
        public virtual DbSet<StandardSiloQuestion> StandardSiloQuestion { get; set; }
        public virtual DbSet<TimeEntry> TimeEntry { get; set; }
        public virtual DbSet<Timekeeper> Timekeeper { get; set; }
        public virtual DbSet<KYCIClient> KYCIClient { get; set; }
        public virtual DbSet<KYCVClient> KYCVClient { get; set; }
        public virtual DbSet<Audit> Audit { get; set; }
        public virtual DbSet<AcknowledgementStatus> AcknowledgementStatus { get; set; }
        public virtual DbSet<AcknowledgementType> AcknowledgementType { get; set; }
        public virtual DbSet<DeliveryChannel> DeliveryChannel { get; set; }
        public virtual DbSet<EmailPosition> EmailPosition { get; set; }
        public virtual DbSet<Message1> Message1 { get; set; }
        public virtual DbSet<MessageRecipient> MessageRecipient { get; set; }
        public virtual DbSet<MessageStatus> MessageStatus { get; set; }
        public virtual DbSet<Notification> Notification { get; set; }
        public virtual DbSet<NotificationAttachment> NotificationAttachment { get; set; }
        public virtual DbSet<NotificationRecipient> NotificationRecipient { get; set; }
        public virtual DbSet<NotificationTemplate> NotificationTemplate { get; set; }
        public virtual DbSet<FieldType> FieldType { get; set; }
        public virtual DbSet<Model> Model { get; set; }
        public virtual DbSet<ModelDetail> ModelDetail { get; set; }
        public virtual DbSet<Report> Report { get; set; }
        public virtual DbSet<ReportDefinition> ReportDefinition { get; set; }
        public virtual DbSet<ReportFilter> ReportFilter { get; set; }
        public virtual DbSet<ReportType> ReportType { get; set; }
        public virtual DbSet<Control> Control { get; set; }
        public virtual DbSet<ControlProperty> ControlProperty { get; set; }
        public virtual DbSet<ControlPropertyValue> ControlPropertyValue { get; set; }
        public virtual DbSet<Dependency> Dependency { get; set; }
        public virtual DbSet<DependencyAction> DependencyAction { get; set; }
        public virtual DbSet<DependencyProperty> DependencyProperty { get; set; }
        public virtual DbSet<DependencyPropertyValue> DependencyPropertyValue { get; set; }
        public virtual DbSet<Element> Element { get; set; }
        public virtual DbSet<ElementType> ElementType { get; set; }
        public virtual DbSet<Form> Form { get; set; }
        public virtual DbSet<FormStatus> FormStatus { get; set; }
        public virtual DbSet<Layout> Layout { get; set; }
        public virtual DbSet<Resource1> Resource1 { get; set; }
        public virtual DbSet<ResourceType1> ResourceType1 { get; set; }
        public virtual DbSet<ResourceValue> ResourceValue { get; set; }
        public virtual DbSet<ValidationRule> ValidationRule { get; set; }
        public virtual DbSet<Validator> Validator { get; set; }
        public virtual DbSet<ValidatorProperty> ValidatorProperty { get; set; }
        public virtual DbSet<ValidatorPropertyValue> ValidatorPropertyValue { get; set; }
        public virtual DbSet<Action> Action { get; set; }
        public virtual DbSet<ActionLog1> ActionLog1 { get; set; }
        public virtual DbSet<ActionType> ActionType { get; set; }
        public virtual DbSet<Activity> Activity { get; set; }
        public virtual DbSet<ActivityInstance> ActivityInstance { get; set; }
        public virtual DbSet<ActivityInstanceStatus> ActivityInstanceStatus { get; set; }
        public virtual DbSet<ActivityType> ActivityType { get; set; }
        public virtual DbSet<Participant> Participant { get; set; }
        public virtual DbSet<ParticipantAction> ParticipantAction { get; set; }
        public virtual DbSet<ParticipantType> ParticipantType { get; set; }
        public virtual DbSet<Process> Process { get; set; }
        public virtual DbSet<ProcessInstance> ProcessInstance { get; set; }
        public virtual DbSet<ProcessInstanceResult> ProcessInstanceResult { get; set; }
        public virtual DbSet<ProcessInstanceStatus> ProcessInstanceStatus { get; set; }
        public virtual DbSet<ProcessStartMode> ProcessStartMode { get; set; }
        public virtual DbSet<ProcessStatus> ProcessStatus { get; set; }
        public virtual DbSet<ProcessType> ProcessType { get; set; }
        public virtual DbSet<Task1> Task1 { get; set; }
        public virtual DbSet<TaskStatus1> TaskStatus1 { get; set; }
        public virtual DbSet<TimerAction> TimerAction { get; set; }
        public virtual DbSet<WaitRule> WaitRule { get; set; }
        public virtual DbSet<UserOffice> UserOffice { get; set; }
        public virtual DbSet<SearchRequestAttachment> SearchRequestAttachment { get; set; }
        public virtual DbSet<SearchRequestDataSource> SearchRequestDataSource { get; set; }
        public virtual DbSet<CorporateTreeMember> CorporateTreeMember { get; set; }
        public virtual DbSet<MatterRole> MatterRole { get; set; }
        public virtual DbSet<SearchResult_EntityScore> SearchResult_EntityScore { get; set; }
        public virtual DbSet<WaiverConstraint> WaiverConstraint { get; set; }
        public virtual DbSet<WaiverGrant> WaiverGrant { get; set; }
        public virtual DbSet<BillingDetail1> BillingDetail1 { get; set; }
        public virtual DbSet<UploadedData> UploadedData { get; set; }
        public virtual DbSet<Log> Log { get; set; }
        public virtual DbSet<InstanceMetadataChangesTable> InstanceMetadataChangesTable { get; set; }
        public virtual DbSet<InstancePromotedPropertiesTable> InstancePromotedPropertiesTable { get; set; }
        public virtual DbSet<InstancesTable> InstancesTable { get; set; }
        public virtual DbSet<KeysTable> KeysTable { get; set; }
        public virtual DbSet<LockOwnersTable> LockOwnersTable { get; set; }
        public virtual DbSet<RunnableInstancesTable> RunnableInstancesTable { get; set; }
        public virtual DbSet<ServiceDeploymentsTable> ServiceDeploymentsTable { get; set; }
        public virtual DbSet<ArchivedList> ArchivedList { get; set; }
        public virtual DbSet<AttachmentLog> AttachmentLog { get; set; }
        public virtual DbSet<AuditLog> AuditLog { get; set; }
        public virtual DbSet<CompletedList> CompletedList { get; set; }
        public virtual DbSet<JoinedList> JoinedList { get; set; }
        public virtual DbSet<KycList> KycList { get; set; }
        public virtual DbSet<TaskList> TaskList { get; set; }
        public virtual DbSet<TodoList> TodoList { get; set; }
        public virtual DbSet<WatchList> WatchList { get; set; }
        public virtual DbSet<ArchivedList1> ArchivedList1 { get; set; }
        public virtual DbSet<AuthorizedPersonContact> AuthorizedPersonContact { get; set; }
        public virtual DbSet<BillingDetailContact> BillingDetailContact { get; set; }
        public virtual DbSet<BusinessIntelligenceClientIndustry> BusinessIntelligenceClientIndustry { get; set; }
        public virtual DbSet<BusinessIntelligenceClientJurisdiction> BusinessIntelligenceClientJurisdiction { get; set; }
        public virtual DbSet<BusinessIntelligenceLegalTopic> BusinessIntelligenceLegalTopic { get; set; }
        public virtual DbSet<BusinessIntelligenceMatterIndustry> BusinessIntelligenceMatterIndustry { get; set; }
        public virtual DbSet<BusinessIntelligenceMatterJurisdiction> BusinessIntelligenceMatterJurisdiction { get; set; }
        public virtual DbSet<ClientBusinessContact> ClientBusinessContact { get; set; }
        public virtual DbSet<ClientHomeContact> ClientHomeContact { get; set; }
        public virtual DbSet<CompletedList1> CompletedList1 { get; set; }
        public virtual DbSet<ImportedKYCList> ImportedKYCList { get; set; }
        public virtual DbSet<JoinedList1> JoinedList1 { get; set; }
        public virtual DbSet<KycList1> KycList1 { get; set; }
        public virtual DbSet<MatterContact> MatterContact { get; set; }
        public virtual DbSet<PayorContact> PayorContact { get; set; }
        public virtual DbSet<TodoList1> TodoList1 { get; set; }
        public virtual DbSet<WatchList1> WatchList1 { get; set; }
        public virtual DbSet<ClientMatterInfo> ClientMatterInfo { get; set; }
        public virtual DbSet<HoldList> HoldList { get; set; }
        public virtual DbSet<SiloList> SiloList { get; set; }
        public virtual DbSet<TimekeeperList> TimekeeperList { get; set; }
        public virtual DbSet<CommonLog> CommonLog { get; set; }
        public virtual DbSet<MessageRecipients> MessageRecipients { get; set; }
        public virtual DbSet<InstancePromotedProperties> InstancePromotedProperties { get; set; }
        public virtual DbSet<Instances> Instances { get; set; }
        public virtual DbSet<ServiceDeployments> ServiceDeployments { get; set; }
        public virtual DbSet<ArchivedList2> ArchivedList2 { get; set; }
        public virtual DbSet<CompletedList2> CompletedList2 { get; set; }
        public virtual DbSet<JoinedList2> JoinedList2 { get; set; }
        public virtual DbSet<KycList2> KycList2 { get; set; }
        public virtual DbSet<TaskList1> TaskList1 { get; set; }
        public virtual DbSet<TodoList2> TodoList2 { get; set; }
        public virtual DbSet<WatchList2> WatchList2 { get; set; }
    
        public virtual int AddLookupValue(Nullable<int> createdById, string table, string code, string name, string notes)
        {
            var createdByIdParameter = createdById.HasValue ?
                new ObjectParameter("CreatedById", createdById) :
                new ObjectParameter("CreatedById", typeof(int));
    
            var tableParameter = table != null ?
                new ObjectParameter("Table", table) :
                new ObjectParameter("Table", typeof(string));
    
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var notesParameter = notes != null ?
                new ObjectParameter("Notes", notes) :
                new ObjectParameter("Notes", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddLookupValue", createdByIdParameter, tableParameter, codeParameter, nameParameter, notesParameter);
        }
    
        public virtual int DeleteAllRequestData()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteAllRequestData");
        }
    
        public virtual int DeleteRequestData()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteRequestData");
        }
    
        public virtual ObjectResult<Nullable<int>> LookupByCode(string table, string code)
        {
            var tableParameter = table != null ?
                new ObjectParameter("Table", table) :
                new ObjectParameter("Table", typeof(string));
    
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("LookupByCode", tableParameter, codeParameter);
        }
    
        public virtual ObjectResult<ShowConnections_Result> ShowConnections()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ShowConnections_Result>("ShowConnections");
        }
    
        public virtual int DropConstraint(string tableName, string prefix)
        {
            var tableNameParameter = tableName != null ?
                new ObjectParameter("TableName", tableName) :
                new ObjectParameter("TableName", typeof(string));
    
            var prefixParameter = prefix != null ?
                new ObjectParameter("Prefix", prefix) :
                new ObjectParameter("Prefix", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DropConstraint", tableNameParameter, prefixParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual int SqlQueryNotificationStoredProcedure_1a9fe4d8_980a_461e_b4b6_d3d912161437()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SqlQueryNotificationStoredProcedure_1a9fe4d8_980a_461e_b4b6_d3d912161437");
        }
    
        public virtual int SqlQueryNotificationStoredProcedure_2395e5d8_d542_4c65_b6e1_a69411657740()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SqlQueryNotificationStoredProcedure_2395e5d8_d542_4c65_b6e1_a69411657740");
        }
    
        public virtual int SqlQueryNotificationStoredProcedure_454a51d1_0e8a_456a_9294_68d95a2501f2()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SqlQueryNotificationStoredProcedure_454a51d1_0e8a_456a_9294_68d95a2501f2");
        }
    
        public virtual int SqlQueryNotificationStoredProcedure_89d6e524_ccc2_47d2_aaa7_320be32bedd6()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SqlQueryNotificationStoredProcedure_89d6e524_ccc2_47d2_aaa7_320be32bedd6");
        }
    
        public virtual int SqlQueryNotificationStoredProcedure_993e952f_49de_462a_94eb_10254899ee5d()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SqlQueryNotificationStoredProcedure_993e952f_49de_462a_94eb_10254899ee5d");
        }
    
        public virtual int SqlQueryNotificationStoredProcedure_b206d422_9d47_4c43_b57b_5e387fc3dd82()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SqlQueryNotificationStoredProcedure_b206d422_9d47_4c43_b57b_5e387fc3dd82");
        }
    
        public virtual int SqlQueryNotificationStoredProcedure_c125b513_3e24_437d_8fc2_bb28780f6d55()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SqlQueryNotificationStoredProcedure_c125b513_3e24_437d_8fc2_bb28780f6d55");
        }
    
        public virtual ObjectResult<Nullable<decimal>> CreateContact(Nullable<int> createdById, Nullable<int> contactTypeId, Nullable<bool> isOrganization, string code, string name, string salutation, string prefixName, string firstName, string middleName, string lastName, string suffixName, string formalName, string informalName, string specialName, string companyName, string position)
        {
            var createdByIdParameter = createdById.HasValue ?
                new ObjectParameter("CreatedById", createdById) :
                new ObjectParameter("CreatedById", typeof(int));
    
            var contactTypeIdParameter = contactTypeId.HasValue ?
                new ObjectParameter("ContactTypeId", contactTypeId) :
                new ObjectParameter("ContactTypeId", typeof(int));
    
            var isOrganizationParameter = isOrganization.HasValue ?
                new ObjectParameter("IsOrganization", isOrganization) :
                new ObjectParameter("IsOrganization", typeof(bool));
    
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var salutationParameter = salutation != null ?
                new ObjectParameter("Salutation", salutation) :
                new ObjectParameter("Salutation", typeof(string));
    
            var prefixNameParameter = prefixName != null ?
                new ObjectParameter("PrefixName", prefixName) :
                new ObjectParameter("PrefixName", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var middleNameParameter = middleName != null ?
                new ObjectParameter("MiddleName", middleName) :
                new ObjectParameter("MiddleName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var suffixNameParameter = suffixName != null ?
                new ObjectParameter("SuffixName", suffixName) :
                new ObjectParameter("SuffixName", typeof(string));
    
            var formalNameParameter = formalName != null ?
                new ObjectParameter("FormalName", formalName) :
                new ObjectParameter("FormalName", typeof(string));
    
            var informalNameParameter = informalName != null ?
                new ObjectParameter("InformalName", informalName) :
                new ObjectParameter("InformalName", typeof(string));
    
            var specialNameParameter = specialName != null ?
                new ObjectParameter("SpecialName", specialName) :
                new ObjectParameter("SpecialName", typeof(string));
    
            var companyNameParameter = companyName != null ?
                new ObjectParameter("CompanyName", companyName) :
                new ObjectParameter("CompanyName", typeof(string));
    
            var positionParameter = position != null ?
                new ObjectParameter("Position", position) :
                new ObjectParameter("Position", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("CreateContact", createdByIdParameter, contactTypeIdParameter, isOrganizationParameter, codeParameter, nameParameter, salutationParameter, prefixNameParameter, firstNameParameter, middleNameParameter, lastNameParameter, suffixNameParameter, formalNameParameter, informalNameParameter, specialNameParameter, companyNameParameter, positionParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> UpdateContact(Nullable<int> contactId, Nullable<int> updatedById, Nullable<bool> isOrganization, string code, string name, string salutation, string prefixName, string firstName, string middleName, string lastName, string suffixName, string formalName, string informalName, string specialName, string companyName, string position)
        {
            var contactIdParameter = contactId.HasValue ?
                new ObjectParameter("ContactId", contactId) :
                new ObjectParameter("ContactId", typeof(int));
    
            var updatedByIdParameter = updatedById.HasValue ?
                new ObjectParameter("UpdatedById", updatedById) :
                new ObjectParameter("UpdatedById", typeof(int));
    
            var isOrganizationParameter = isOrganization.HasValue ?
                new ObjectParameter("IsOrganization", isOrganization) :
                new ObjectParameter("IsOrganization", typeof(bool));
    
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var salutationParameter = salutation != null ?
                new ObjectParameter("Salutation", salutation) :
                new ObjectParameter("Salutation", typeof(string));
    
            var prefixNameParameter = prefixName != null ?
                new ObjectParameter("PrefixName", prefixName) :
                new ObjectParameter("PrefixName", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var middleNameParameter = middleName != null ?
                new ObjectParameter("MiddleName", middleName) :
                new ObjectParameter("MiddleName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var suffixNameParameter = suffixName != null ?
                new ObjectParameter("SuffixName", suffixName) :
                new ObjectParameter("SuffixName", typeof(string));
    
            var formalNameParameter = formalName != null ?
                new ObjectParameter("FormalName", formalName) :
                new ObjectParameter("FormalName", typeof(string));
    
            var informalNameParameter = informalName != null ?
                new ObjectParameter("InformalName", informalName) :
                new ObjectParameter("InformalName", typeof(string));
    
            var specialNameParameter = specialName != null ?
                new ObjectParameter("SpecialName", specialName) :
                new ObjectParameter("SpecialName", typeof(string));
    
            var companyNameParameter = companyName != null ?
                new ObjectParameter("CompanyName", companyName) :
                new ObjectParameter("CompanyName", typeof(string));
    
            var positionParameter = position != null ?
                new ObjectParameter("Position", position) :
                new ObjectParameter("Position", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("UpdateContact", contactIdParameter, updatedByIdParameter, isOrganizationParameter, codeParameter, nameParameter, salutationParameter, prefixNameParameter, firstNameParameter, middleNameParameter, lastNameParameter, suffixNameParameter, formalNameParameter, informalNameParameter, specialNameParameter, companyNameParameter, positionParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> CreateAuthorizedPersonContact(Nullable<int> clientId, Nullable<int> createdById, Nullable<bool> isOrganization, string code, string name, string salutation, string prefixName, string firstName, string middleName, string lastName, string suffixName, string formalName, string informalName, string specialName, string position)
        {
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            var createdByIdParameter = createdById.HasValue ?
                new ObjectParameter("CreatedById", createdById) :
                new ObjectParameter("CreatedById", typeof(int));
    
            var isOrganizationParameter = isOrganization.HasValue ?
                new ObjectParameter("IsOrganization", isOrganization) :
                new ObjectParameter("IsOrganization", typeof(bool));
    
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var salutationParameter = salutation != null ?
                new ObjectParameter("Salutation", salutation) :
                new ObjectParameter("Salutation", typeof(string));
    
            var prefixNameParameter = prefixName != null ?
                new ObjectParameter("PrefixName", prefixName) :
                new ObjectParameter("PrefixName", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var middleNameParameter = middleName != null ?
                new ObjectParameter("MiddleName", middleName) :
                new ObjectParameter("MiddleName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var suffixNameParameter = suffixName != null ?
                new ObjectParameter("SuffixName", suffixName) :
                new ObjectParameter("SuffixName", typeof(string));
    
            var formalNameParameter = formalName != null ?
                new ObjectParameter("FormalName", formalName) :
                new ObjectParameter("FormalName", typeof(string));
    
            var informalNameParameter = informalName != null ?
                new ObjectParameter("InformalName", informalName) :
                new ObjectParameter("InformalName", typeof(string));
    
            var specialNameParameter = specialName != null ?
                new ObjectParameter("SpecialName", specialName) :
                new ObjectParameter("SpecialName", typeof(string));
    
            var positionParameter = position != null ?
                new ObjectParameter("Position", position) :
                new ObjectParameter("Position", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("CreateAuthorizedPersonContact", clientIdParameter, createdByIdParameter, isOrganizationParameter, codeParameter, nameParameter, salutationParameter, prefixNameParameter, firstNameParameter, middleNameParameter, lastNameParameter, suffixNameParameter, formalNameParameter, informalNameParameter, specialNameParameter, positionParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> CreateBillingDetailContact(Nullable<int> clientId, Nullable<int> createdById, Nullable<bool> isOrganization, string code, string name, string salutation, string prefixName, string firstName, string middleName, string lastName, string suffixName, string formalName, string informalName, string specialName, string position)
        {
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            var createdByIdParameter = createdById.HasValue ?
                new ObjectParameter("CreatedById", createdById) :
                new ObjectParameter("CreatedById", typeof(int));
    
            var isOrganizationParameter = isOrganization.HasValue ?
                new ObjectParameter("IsOrganization", isOrganization) :
                new ObjectParameter("IsOrganization", typeof(bool));
    
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var salutationParameter = salutation != null ?
                new ObjectParameter("Salutation", salutation) :
                new ObjectParameter("Salutation", typeof(string));
    
            var prefixNameParameter = prefixName != null ?
                new ObjectParameter("PrefixName", prefixName) :
                new ObjectParameter("PrefixName", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var middleNameParameter = middleName != null ?
                new ObjectParameter("MiddleName", middleName) :
                new ObjectParameter("MiddleName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var suffixNameParameter = suffixName != null ?
                new ObjectParameter("SuffixName", suffixName) :
                new ObjectParameter("SuffixName", typeof(string));
    
            var formalNameParameter = formalName != null ?
                new ObjectParameter("FormalName", formalName) :
                new ObjectParameter("FormalName", typeof(string));
    
            var informalNameParameter = informalName != null ?
                new ObjectParameter("InformalName", informalName) :
                new ObjectParameter("InformalName", typeof(string));
    
            var specialNameParameter = specialName != null ?
                new ObjectParameter("SpecialName", specialName) :
                new ObjectParameter("SpecialName", typeof(string));
    
            var positionParameter = position != null ?
                new ObjectParameter("Position", position) :
                new ObjectParameter("Position", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("CreateBillingDetailContact", clientIdParameter, createdByIdParameter, isOrganizationParameter, codeParameter, nameParameter, salutationParameter, prefixNameParameter, firstNameParameter, middleNameParameter, lastNameParameter, suffixNameParameter, formalNameParameter, informalNameParameter, specialNameParameter, positionParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> CreateBusinessIntelligenceClientIndustry(Nullable<int> requestId, Nullable<int> industryId)
        {
            var requestIdParameter = requestId.HasValue ?
                new ObjectParameter("RequestId", requestId) :
                new ObjectParameter("RequestId", typeof(int));
    
            var industryIdParameter = industryId.HasValue ?
                new ObjectParameter("IndustryId", industryId) :
                new ObjectParameter("IndustryId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("CreateBusinessIntelligenceClientIndustry", requestIdParameter, industryIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> CreateBusinessIntelligenceClientJurisdiction(Nullable<int> requestId, Nullable<int> jurisdictionId)
        {
            var requestIdParameter = requestId.HasValue ?
                new ObjectParameter("RequestId", requestId) :
                new ObjectParameter("RequestId", typeof(int));
    
            var jurisdictionIdParameter = jurisdictionId.HasValue ?
                new ObjectParameter("JurisdictionId", jurisdictionId) :
                new ObjectParameter("JurisdictionId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("CreateBusinessIntelligenceClientJurisdiction", requestIdParameter, jurisdictionIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> CreateBusinessIntelligenceLegalTopic(Nullable<int> requestId, Nullable<int> legalTopicId)
        {
            var requestIdParameter = requestId.HasValue ?
                new ObjectParameter("RequestId", requestId) :
                new ObjectParameter("RequestId", typeof(int));
    
            var legalTopicIdParameter = legalTopicId.HasValue ?
                new ObjectParameter("LegalTopicId", legalTopicId) :
                new ObjectParameter("LegalTopicId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("CreateBusinessIntelligenceLegalTopic", requestIdParameter, legalTopicIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> CreateBusinessIntelligenceMatterIndustry(Nullable<int> requestId, Nullable<int> industryId)
        {
            var requestIdParameter = requestId.HasValue ?
                new ObjectParameter("RequestId", requestId) :
                new ObjectParameter("RequestId", typeof(int));
    
            var industryIdParameter = industryId.HasValue ?
                new ObjectParameter("IndustryId", industryId) :
                new ObjectParameter("IndustryId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("CreateBusinessIntelligenceMatterIndustry", requestIdParameter, industryIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> CreateBusinessIntelligenceMatterJurisdiction(Nullable<int> requestId, Nullable<int> jurisdictionId)
        {
            var requestIdParameter = requestId.HasValue ?
                new ObjectParameter("RequestId", requestId) :
                new ObjectParameter("RequestId", typeof(int));
    
            var jurisdictionIdParameter = jurisdictionId.HasValue ?
                new ObjectParameter("JurisdictionId", jurisdictionId) :
                new ObjectParameter("JurisdictionId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("CreateBusinessIntelligenceMatterJurisdiction", requestIdParameter, jurisdictionIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> CreateClientBusinessContact(Nullable<int> clientId, Nullable<int> createdById, Nullable<bool> isOrganization, string code, string name, string salutation, string prefixName, string firstName, string middleName, string lastName, string suffixName, string formalName, string informalName, string specialName, string position)
        {
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            var createdByIdParameter = createdById.HasValue ?
                new ObjectParameter("CreatedById", createdById) :
                new ObjectParameter("CreatedById", typeof(int));
    
            var isOrganizationParameter = isOrganization.HasValue ?
                new ObjectParameter("IsOrganization", isOrganization) :
                new ObjectParameter("IsOrganization", typeof(bool));
    
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var salutationParameter = salutation != null ?
                new ObjectParameter("Salutation", salutation) :
                new ObjectParameter("Salutation", typeof(string));
    
            var prefixNameParameter = prefixName != null ?
                new ObjectParameter("PrefixName", prefixName) :
                new ObjectParameter("PrefixName", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var middleNameParameter = middleName != null ?
                new ObjectParameter("MiddleName", middleName) :
                new ObjectParameter("MiddleName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var suffixNameParameter = suffixName != null ?
                new ObjectParameter("SuffixName", suffixName) :
                new ObjectParameter("SuffixName", typeof(string));
    
            var formalNameParameter = formalName != null ?
                new ObjectParameter("FormalName", formalName) :
                new ObjectParameter("FormalName", typeof(string));
    
            var informalNameParameter = informalName != null ?
                new ObjectParameter("InformalName", informalName) :
                new ObjectParameter("InformalName", typeof(string));
    
            var specialNameParameter = specialName != null ?
                new ObjectParameter("SpecialName", specialName) :
                new ObjectParameter("SpecialName", typeof(string));
    
            var positionParameter = position != null ?
                new ObjectParameter("Position", position) :
                new ObjectParameter("Position", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("CreateClientBusinessContact", clientIdParameter, createdByIdParameter, isOrganizationParameter, codeParameter, nameParameter, salutationParameter, prefixNameParameter, firstNameParameter, middleNameParameter, lastNameParameter, suffixNameParameter, formalNameParameter, informalNameParameter, specialNameParameter, positionParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> CreateClientHomeContact(Nullable<int> clientId, Nullable<int> createdById, Nullable<bool> isOrganization, string code, string name, string salutation, string prefixName, string firstName, string middleName, string lastName, string suffixName, string formalName, string informalName, string specialName, string position)
        {
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            var createdByIdParameter = createdById.HasValue ?
                new ObjectParameter("CreatedById", createdById) :
                new ObjectParameter("CreatedById", typeof(int));
    
            var isOrganizationParameter = isOrganization.HasValue ?
                new ObjectParameter("IsOrganization", isOrganization) :
                new ObjectParameter("IsOrganization", typeof(bool));
    
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var salutationParameter = salutation != null ?
                new ObjectParameter("Salutation", salutation) :
                new ObjectParameter("Salutation", typeof(string));
    
            var prefixNameParameter = prefixName != null ?
                new ObjectParameter("PrefixName", prefixName) :
                new ObjectParameter("PrefixName", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var middleNameParameter = middleName != null ?
                new ObjectParameter("MiddleName", middleName) :
                new ObjectParameter("MiddleName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var suffixNameParameter = suffixName != null ?
                new ObjectParameter("SuffixName", suffixName) :
                new ObjectParameter("SuffixName", typeof(string));
    
            var formalNameParameter = formalName != null ?
                new ObjectParameter("FormalName", formalName) :
                new ObjectParameter("FormalName", typeof(string));
    
            var informalNameParameter = informalName != null ?
                new ObjectParameter("InformalName", informalName) :
                new ObjectParameter("InformalName", typeof(string));
    
            var specialNameParameter = specialName != null ?
                new ObjectParameter("SpecialName", specialName) :
                new ObjectParameter("SpecialName", typeof(string));
    
            var positionParameter = position != null ?
                new ObjectParameter("Position", position) :
                new ObjectParameter("Position", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("CreateClientHomeContact", clientIdParameter, createdByIdParameter, isOrganizationParameter, codeParameter, nameParameter, salutationParameter, prefixNameParameter, firstNameParameter, middleNameParameter, lastNameParameter, suffixNameParameter, formalNameParameter, informalNameParameter, specialNameParameter, positionParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> CreateMatterContact(Nullable<int> matterId, Nullable<int> createdById, Nullable<bool> isOrganization, string code, string name, string salutation, string prefixName, string firstName, string middleName, string lastName, string suffixName, string formalName, string informalName, string specialName, string companyName, string position)
        {
            var matterIdParameter = matterId.HasValue ?
                new ObjectParameter("MatterId", matterId) :
                new ObjectParameter("MatterId", typeof(int));
    
            var createdByIdParameter = createdById.HasValue ?
                new ObjectParameter("CreatedById", createdById) :
                new ObjectParameter("CreatedById", typeof(int));
    
            var isOrganizationParameter = isOrganization.HasValue ?
                new ObjectParameter("IsOrganization", isOrganization) :
                new ObjectParameter("IsOrganization", typeof(bool));
    
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var salutationParameter = salutation != null ?
                new ObjectParameter("Salutation", salutation) :
                new ObjectParameter("Salutation", typeof(string));
    
            var prefixNameParameter = prefixName != null ?
                new ObjectParameter("PrefixName", prefixName) :
                new ObjectParameter("PrefixName", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var middleNameParameter = middleName != null ?
                new ObjectParameter("MiddleName", middleName) :
                new ObjectParameter("MiddleName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var suffixNameParameter = suffixName != null ?
                new ObjectParameter("SuffixName", suffixName) :
                new ObjectParameter("SuffixName", typeof(string));
    
            var formalNameParameter = formalName != null ?
                new ObjectParameter("FormalName", formalName) :
                new ObjectParameter("FormalName", typeof(string));
    
            var informalNameParameter = informalName != null ?
                new ObjectParameter("InformalName", informalName) :
                new ObjectParameter("InformalName", typeof(string));
    
            var specialNameParameter = specialName != null ?
                new ObjectParameter("SpecialName", specialName) :
                new ObjectParameter("SpecialName", typeof(string));
    
            var companyNameParameter = companyName != null ?
                new ObjectParameter("CompanyName", companyName) :
                new ObjectParameter("CompanyName", typeof(string));
    
            var positionParameter = position != null ?
                new ObjectParameter("Position", position) :
                new ObjectParameter("Position", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("CreateMatterContact", matterIdParameter, createdByIdParameter, isOrganizationParameter, codeParameter, nameParameter, salutationParameter, prefixNameParameter, firstNameParameter, middleNameParameter, lastNameParameter, suffixNameParameter, formalNameParameter, informalNameParameter, specialNameParameter, companyNameParameter, positionParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> CreatePayorContact(Nullable<int> clientId, Nullable<int> createdById, Nullable<bool> isOrganization, string code, string name, string salutation, string prefixName, string firstName, string middleName, string lastName, string suffixName, string formalName, string informalName, string specialName, string position)
        {
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            var createdByIdParameter = createdById.HasValue ?
                new ObjectParameter("CreatedById", createdById) :
                new ObjectParameter("CreatedById", typeof(int));
    
            var isOrganizationParameter = isOrganization.HasValue ?
                new ObjectParameter("IsOrganization", isOrganization) :
                new ObjectParameter("IsOrganization", typeof(bool));
    
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var salutationParameter = salutation != null ?
                new ObjectParameter("Salutation", salutation) :
                new ObjectParameter("Salutation", typeof(string));
    
            var prefixNameParameter = prefixName != null ?
                new ObjectParameter("PrefixName", prefixName) :
                new ObjectParameter("PrefixName", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var middleNameParameter = middleName != null ?
                new ObjectParameter("MiddleName", middleName) :
                new ObjectParameter("MiddleName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var suffixNameParameter = suffixName != null ?
                new ObjectParameter("SuffixName", suffixName) :
                new ObjectParameter("SuffixName", typeof(string));
    
            var formalNameParameter = formalName != null ?
                new ObjectParameter("FormalName", formalName) :
                new ObjectParameter("FormalName", typeof(string));
    
            var informalNameParameter = informalName != null ?
                new ObjectParameter("InformalName", informalName) :
                new ObjectParameter("InformalName", typeof(string));
    
            var specialNameParameter = specialName != null ?
                new ObjectParameter("SpecialName", specialName) :
                new ObjectParameter("SpecialName", typeof(string));
    
            var positionParameter = position != null ?
                new ObjectParameter("Position", position) :
                new ObjectParameter("Position", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("CreatePayorContact", clientIdParameter, createdByIdParameter, isOrganizationParameter, codeParameter, nameParameter, salutationParameter, prefixNameParameter, firstNameParameter, middleNameParameter, lastNameParameter, suffixNameParameter, formalNameParameter, informalNameParameter, specialNameParameter, positionParameter);
        }
    
        public virtual int DeleteStub(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteStub", idParameter);
        }
    
        public virtual int UpdateStub(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateStub", idParameter);
        }
    
        public virtual int CreateAddress(Nullable<int> contactId, Nullable<int> addressTypeId, string city, string phone, string address1, string state, string country, string zip, Nullable<int> dataRowId)
        {
            var contactIdParameter = contactId.HasValue ?
                new ObjectParameter("contactId", contactId) :
                new ObjectParameter("contactId", typeof(int));
    
            var addressTypeIdParameter = addressTypeId.HasValue ?
                new ObjectParameter("addressTypeId", addressTypeId) :
                new ObjectParameter("addressTypeId", typeof(int));
    
            var cityParameter = city != null ?
                new ObjectParameter("city", city) :
                new ObjectParameter("city", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("phone", phone) :
                new ObjectParameter("phone", typeof(string));
    
            var address1Parameter = address1 != null ?
                new ObjectParameter("address1", address1) :
                new ObjectParameter("address1", typeof(string));
    
            var stateParameter = state != null ?
                new ObjectParameter("state", state) :
                new ObjectParameter("state", typeof(string));
    
            var countryParameter = country != null ?
                new ObjectParameter("country", country) :
                new ObjectParameter("country", typeof(string));
    
            var zipParameter = zip != null ?
                new ObjectParameter("zip", zip) :
                new ObjectParameter("zip", typeof(string));
    
            var dataRowIdParameter = dataRowId.HasValue ?
                new ObjectParameter("dataRowId", dataRowId) :
                new ObjectParameter("dataRowId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CreateAddress", contactIdParameter, addressTypeIdParameter, cityParameter, phoneParameter, address1Parameter, stateParameter, countryParameter, zipParameter, dataRowIdParameter);
        }
    
        public virtual ObjectResult<string> CreateClient(Nullable<int> documentInstanceId, string name, string code, Nullable<bool> isOrganization, string referenceNo, string placeOfIssue, string occupation, string indName, string indOccupation, string industry, string externalId, Nullable<int> clientStatusId, Nullable<int> clientTypeId, Nullable<int> identifiedById, Nullable<int> dataRowId)
        {
            var documentInstanceIdParameter = documentInstanceId.HasValue ?
                new ObjectParameter("documentInstanceId", documentInstanceId) :
                new ObjectParameter("documentInstanceId", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var codeParameter = code != null ?
                new ObjectParameter("code", code) :
                new ObjectParameter("code", typeof(string));
    
            var isOrganizationParameter = isOrganization.HasValue ?
                new ObjectParameter("isOrganization", isOrganization) :
                new ObjectParameter("isOrganization", typeof(bool));
    
            var referenceNoParameter = referenceNo != null ?
                new ObjectParameter("referenceNo", referenceNo) :
                new ObjectParameter("referenceNo", typeof(string));
    
            var placeOfIssueParameter = placeOfIssue != null ?
                new ObjectParameter("placeOfIssue", placeOfIssue) :
                new ObjectParameter("placeOfIssue", typeof(string));
    
            var occupationParameter = occupation != null ?
                new ObjectParameter("occupation", occupation) :
                new ObjectParameter("occupation", typeof(string));
    
            var indNameParameter = indName != null ?
                new ObjectParameter("indName", indName) :
                new ObjectParameter("indName", typeof(string));
    
            var indOccupationParameter = indOccupation != null ?
                new ObjectParameter("indOccupation", indOccupation) :
                new ObjectParameter("indOccupation", typeof(string));
    
            var industryParameter = industry != null ?
                new ObjectParameter("industry", industry) :
                new ObjectParameter("industry", typeof(string));
    
            var externalIdParameter = externalId != null ?
                new ObjectParameter("externalId", externalId) :
                new ObjectParameter("externalId", typeof(string));
    
            var clientStatusIdParameter = clientStatusId.HasValue ?
                new ObjectParameter("clientStatusId", clientStatusId) :
                new ObjectParameter("clientStatusId", typeof(int));
    
            var clientTypeIdParameter = clientTypeId.HasValue ?
                new ObjectParameter("clientTypeId", clientTypeId) :
                new ObjectParameter("clientTypeId", typeof(int));
    
            var identifiedByIdParameter = identifiedById.HasValue ?
                new ObjectParameter("identifiedById", identifiedById) :
                new ObjectParameter("identifiedById", typeof(int));
    
            var dataRowIdParameter = dataRowId.HasValue ?
                new ObjectParameter("dataRowId", dataRowId) :
                new ObjectParameter("dataRowId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("CreateClient", documentInstanceIdParameter, nameParameter, codeParameter, isOrganizationParameter, referenceNoParameter, placeOfIssueParameter, occupationParameter, indNameParameter, indOccupationParameter, industryParameter, externalIdParameter, clientStatusIdParameter, clientTypeIdParameter, identifiedByIdParameter, dataRowIdParameter);
        }
    
        public virtual ObjectResult<string> CreateContact1(Nullable<int> clientId, string name, string code, string position, Nullable<int> contactTypeId, Nullable<int> contactOwnerTypeId, Nullable<int> dataRowId)
        {
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("clientId", clientId) :
                new ObjectParameter("clientId", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var codeParameter = code != null ?
                new ObjectParameter("code", code) :
                new ObjectParameter("code", typeof(string));
    
            var positionParameter = position != null ?
                new ObjectParameter("position", position) :
                new ObjectParameter("position", typeof(string));
    
            var contactTypeIdParameter = contactTypeId.HasValue ?
                new ObjectParameter("contactTypeId", contactTypeId) :
                new ObjectParameter("contactTypeId", typeof(int));
    
            var contactOwnerTypeIdParameter = contactOwnerTypeId.HasValue ?
                new ObjectParameter("contactOwnerTypeId", contactOwnerTypeId) :
                new ObjectParameter("contactOwnerTypeId", typeof(int));
    
            var dataRowIdParameter = dataRowId.HasValue ?
                new ObjectParameter("dataRowId", dataRowId) :
                new ObjectParameter("dataRowId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("CreateContact1", clientIdParameter, nameParameter, codeParameter, positionParameter, contactTypeIdParameter, contactOwnerTypeIdParameter, dataRowIdParameter);
        }
    
        public virtual ObjectResult<string> CreateMatter(Nullable<int> documentInstanceId, string name, string code, Nullable<int> dataRowId)
        {
            var documentInstanceIdParameter = documentInstanceId.HasValue ?
                new ObjectParameter("documentInstanceId", documentInstanceId) :
                new ObjectParameter("documentInstanceId", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var codeParameter = code != null ?
                new ObjectParameter("code", code) :
                new ObjectParameter("code", typeof(string));
    
            var dataRowIdParameter = dataRowId.HasValue ?
                new ObjectParameter("dataRowId", dataRowId) :
                new ObjectParameter("dataRowId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("CreateMatter", documentInstanceIdParameter, nameParameter, codeParameter, dataRowIdParameter);
        }
    
        public virtual ObjectResult<string> CreateRequest(string name, Nullable<int> documentId, Nullable<int> requestStatusId, Nullable<int> requestTypeId, Nullable<int> localeId, Nullable<int> billingLawyerId, string clientCode, Nullable<int> dataRowId)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var documentIdParameter = documentId.HasValue ?
                new ObjectParameter("documentId", documentId) :
                new ObjectParameter("documentId", typeof(int));
    
            var requestStatusIdParameter = requestStatusId.HasValue ?
                new ObjectParameter("requestStatusId", requestStatusId) :
                new ObjectParameter("requestStatusId", typeof(int));
    
            var requestTypeIdParameter = requestTypeId.HasValue ?
                new ObjectParameter("requestTypeId", requestTypeId) :
                new ObjectParameter("requestTypeId", typeof(int));
    
            var localeIdParameter = localeId.HasValue ?
                new ObjectParameter("localeId", localeId) :
                new ObjectParameter("localeId", typeof(int));
    
            var billingLawyerIdParameter = billingLawyerId.HasValue ?
                new ObjectParameter("billingLawyerId", billingLawyerId) :
                new ObjectParameter("billingLawyerId", typeof(int));
    
            var clientCodeParameter = clientCode != null ?
                new ObjectParameter("clientCode", clientCode) :
                new ObjectParameter("clientCode", typeof(string));
    
            var dataRowIdParameter = dataRowId.HasValue ?
                new ObjectParameter("dataRowId", dataRowId) :
                new ObjectParameter("dataRowId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("CreateRequest", nameParameter, documentIdParameter, requestStatusIdParameter, requestTypeIdParameter, localeIdParameter, billingLawyerIdParameter, clientCodeParameter, dataRowIdParameter);
        }
    
        public virtual int DeleteKYCImportedALL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteKYCImportedALL");
        }
    
        public virtual int DeleteKYCImportedRow(Nullable<int> activityInstanceId)
        {
            var activityInstanceIdParameter = activityInstanceId.HasValue ?
                new ObjectParameter("ActivityInstanceId", activityInstanceId) :
                new ObjectParameter("ActivityInstanceId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteKYCImportedRow", activityInstanceIdParameter);
        }
    
        public virtual int GetClientCode(Nullable<int> matterNumber)
        {
            var matterNumberParameter = matterNumber.HasValue ?
                new ObjectParameter("matterNumber", matterNumber) :
                new ObjectParameter("matterNumber", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetClientCode", matterNumberParameter);
        }
    
        public virtual ObjectResult<string> ProcessKYCVUploadedDataRow(Nullable<int> id, Nullable<int> matterNumber, Nullable<int> externalId_KI1a, string entity_Type_KI1b, string client_Name_KI1, string occupation_KI3, string authorized_Person_KI17, string position_KI18, string phoneNo_KI19, string indClientName_KVI2, string indOccupation_KVI3, string buss_IdentNo_KI14, string kI14IssuePlace_KI15, string bL_Login_KVI5, string bL_Name_KVI5A, string industry_KI16, string bus_Address_KI4, string city_KI6, string state_KI7, string zipCode_KI21, string coutry_KI20, string tepNo_KI12, string home_Add_KI8, string hom_City_KI10, string hom_State_KI11, string hom_ZipCode_KI23, string hom_Coutry_KI22)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var matterNumberParameter = matterNumber.HasValue ?
                new ObjectParameter("MatterNumber", matterNumber) :
                new ObjectParameter("MatterNumber", typeof(int));
    
            var externalId_KI1aParameter = externalId_KI1a.HasValue ?
                new ObjectParameter("ExternalId_KI1a", externalId_KI1a) :
                new ObjectParameter("ExternalId_KI1a", typeof(int));
    
            var entity_Type_KI1bParameter = entity_Type_KI1b != null ?
                new ObjectParameter("Entity_Type_KI1b", entity_Type_KI1b) :
                new ObjectParameter("Entity_Type_KI1b", typeof(string));
    
            var client_Name_KI1Parameter = client_Name_KI1 != null ?
                new ObjectParameter("Client_Name_KI1", client_Name_KI1) :
                new ObjectParameter("Client_Name_KI1", typeof(string));
    
            var occupation_KI3Parameter = occupation_KI3 != null ?
                new ObjectParameter("Occupation_KI3", occupation_KI3) :
                new ObjectParameter("Occupation_KI3", typeof(string));
    
            var authorized_Person_KI17Parameter = authorized_Person_KI17 != null ?
                new ObjectParameter("Authorized_Person_KI17", authorized_Person_KI17) :
                new ObjectParameter("Authorized_Person_KI17", typeof(string));
    
            var position_KI18Parameter = position_KI18 != null ?
                new ObjectParameter("Position_KI18", position_KI18) :
                new ObjectParameter("Position_KI18", typeof(string));
    
            var phoneNo_KI19Parameter = phoneNo_KI19 != null ?
                new ObjectParameter("PhoneNo_KI19", phoneNo_KI19) :
                new ObjectParameter("PhoneNo_KI19", typeof(string));
    
            var indClientName_KVI2Parameter = indClientName_KVI2 != null ?
                new ObjectParameter("IndClientName_KVI2", indClientName_KVI2) :
                new ObjectParameter("IndClientName_KVI2", typeof(string));
    
            var indOccupation_KVI3Parameter = indOccupation_KVI3 != null ?
                new ObjectParameter("IndOccupation_KVI3", indOccupation_KVI3) :
                new ObjectParameter("IndOccupation_KVI3", typeof(string));
    
            var buss_IdentNo_KI14Parameter = buss_IdentNo_KI14 != null ?
                new ObjectParameter("Buss_IdentNo_KI14", buss_IdentNo_KI14) :
                new ObjectParameter("Buss_IdentNo_KI14", typeof(string));
    
            var kI14IssuePlace_KI15Parameter = kI14IssuePlace_KI15 != null ?
                new ObjectParameter("KI14IssuePlace_KI15", kI14IssuePlace_KI15) :
                new ObjectParameter("KI14IssuePlace_KI15", typeof(string));
    
            var bL_Login_KVI5Parameter = bL_Login_KVI5 != null ?
                new ObjectParameter("BL_Login_KVI5", bL_Login_KVI5) :
                new ObjectParameter("BL_Login_KVI5", typeof(string));
    
            var bL_Name_KVI5AParameter = bL_Name_KVI5A != null ?
                new ObjectParameter("BL_Name_KVI5A", bL_Name_KVI5A) :
                new ObjectParameter("BL_Name_KVI5A", typeof(string));
    
            var industry_KI16Parameter = industry_KI16 != null ?
                new ObjectParameter("Industry_KI16", industry_KI16) :
                new ObjectParameter("Industry_KI16", typeof(string));
    
            var bus_Address_KI4Parameter = bus_Address_KI4 != null ?
                new ObjectParameter("Bus_Address_KI4", bus_Address_KI4) :
                new ObjectParameter("Bus_Address_KI4", typeof(string));
    
            var city_KI6Parameter = city_KI6 != null ?
                new ObjectParameter("City_KI6", city_KI6) :
                new ObjectParameter("City_KI6", typeof(string));
    
            var state_KI7Parameter = state_KI7 != null ?
                new ObjectParameter("State_KI7", state_KI7) :
                new ObjectParameter("State_KI7", typeof(string));
    
            var zipCode_KI21Parameter = zipCode_KI21 != null ?
                new ObjectParameter("ZipCode_KI21", zipCode_KI21) :
                new ObjectParameter("ZipCode_KI21", typeof(string));
    
            var coutry_KI20Parameter = coutry_KI20 != null ?
                new ObjectParameter("Coutry_KI20", coutry_KI20) :
                new ObjectParameter("Coutry_KI20", typeof(string));
    
            var tepNo_KI12Parameter = tepNo_KI12 != null ?
                new ObjectParameter("TepNo_KI12", tepNo_KI12) :
                new ObjectParameter("TepNo_KI12", typeof(string));
    
            var home_Add_KI8Parameter = home_Add_KI8 != null ?
                new ObjectParameter("Home_Add_KI8", home_Add_KI8) :
                new ObjectParameter("Home_Add_KI8", typeof(string));
    
            var hom_City_KI10Parameter = hom_City_KI10 != null ?
                new ObjectParameter("Hom_City_KI10", hom_City_KI10) :
                new ObjectParameter("Hom_City_KI10", typeof(string));
    
            var hom_State_KI11Parameter = hom_State_KI11 != null ?
                new ObjectParameter("Hom_State_KI11", hom_State_KI11) :
                new ObjectParameter("Hom_State_KI11", typeof(string));
    
            var hom_ZipCode_KI23Parameter = hom_ZipCode_KI23 != null ?
                new ObjectParameter("Hom_ZipCode_KI23", hom_ZipCode_KI23) :
                new ObjectParameter("Hom_ZipCode_KI23", typeof(string));
    
            var hom_Coutry_KI22Parameter = hom_Coutry_KI22 != null ?
                new ObjectParameter("Hom_Coutry_KI22", hom_Coutry_KI22) :
                new ObjectParameter("Hom_Coutry_KI22", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("ProcessKYCVUploadedDataRow", idParameter, matterNumberParameter, externalId_KI1aParameter, entity_Type_KI1bParameter, client_Name_KI1Parameter, occupation_KI3Parameter, authorized_Person_KI17Parameter, position_KI18Parameter, phoneNo_KI19Parameter, indClientName_KVI2Parameter, indOccupation_KVI3Parameter, buss_IdentNo_KI14Parameter, kI14IssuePlace_KI15Parameter, bL_Login_KVI5Parameter, bL_Name_KVI5AParameter, industry_KI16Parameter, bus_Address_KI4Parameter, city_KI6Parameter, state_KI7Parameter, zipCode_KI21Parameter, coutry_KI20Parameter, tepNo_KI12Parameter, home_Add_KI8Parameter, hom_City_KI10Parameter, hom_State_KI11Parameter, hom_ZipCode_KI23Parameter, hom_Coutry_KI22Parameter);
        }
    
        public virtual ObjectResult<string> GetReport(Nullable<int> reportId, Nullable<int> filterId, string parentTable)
        {
            var reportIdParameter = reportId.HasValue ?
                new ObjectParameter("ReportId", reportId) :
                new ObjectParameter("ReportId", typeof(int));
    
            var filterIdParameter = filterId.HasValue ?
                new ObjectParameter("FilterId", filterId) :
                new ObjectParameter("FilterId", typeof(int));
    
            var parentTableParameter = parentTable != null ?
                new ObjectParameter("ParentTable", parentTable) :
                new ObjectParameter("ParentTable", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GetReport", reportIdParameter, filterIdParameter, parentTableParameter);
        }
    
        public virtual ObjectResult<AssociateKeys_Result> AssociateKeys(Nullable<long> surrogateInstanceId, string keysToAssociate, byte[] concatenatedKeyProperties, Nullable<byte> encodingOption, Nullable<System.Guid> singleKeyId)
        {
            var surrogateInstanceIdParameter = surrogateInstanceId.HasValue ?
                new ObjectParameter("surrogateInstanceId", surrogateInstanceId) :
                new ObjectParameter("surrogateInstanceId", typeof(long));
    
            var keysToAssociateParameter = keysToAssociate != null ?
                new ObjectParameter("keysToAssociate", keysToAssociate) :
                new ObjectParameter("keysToAssociate", typeof(string));
    
            var concatenatedKeyPropertiesParameter = concatenatedKeyProperties != null ?
                new ObjectParameter("concatenatedKeyProperties", concatenatedKeyProperties) :
                new ObjectParameter("concatenatedKeyProperties", typeof(byte[]));
    
            var encodingOptionParameter = encodingOption.HasValue ?
                new ObjectParameter("encodingOption", encodingOption) :
                new ObjectParameter("encodingOption", typeof(byte));
    
            var singleKeyIdParameter = singleKeyId.HasValue ?
                new ObjectParameter("singleKeyId", singleKeyId) :
                new ObjectParameter("singleKeyId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AssociateKeys_Result>("AssociateKeys", surrogateInstanceIdParameter, keysToAssociateParameter, concatenatedKeyPropertiesParameter, encodingOptionParameter, singleKeyIdParameter);
        }
    
        public virtual ObjectResult<CompleteKeys_Result> CompleteKeys(Nullable<long> surrogateInstanceId, string keysToComplete)
        {
            var surrogateInstanceIdParameter = surrogateInstanceId.HasValue ?
                new ObjectParameter("surrogateInstanceId", surrogateInstanceId) :
                new ObjectParameter("surrogateInstanceId", typeof(long));
    
            var keysToCompleteParameter = keysToComplete != null ?
                new ObjectParameter("keysToComplete", keysToComplete) :
                new ObjectParameter("keysToComplete", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CompleteKeys_Result>("CompleteKeys", surrogateInstanceIdParameter, keysToCompleteParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> CreateInstance(Nullable<System.Guid> instanceId, Nullable<long> surrogateLockOwnerId, Nullable<System.Guid> workflowHostType, Nullable<long> serviceDeploymentId, ObjectParameter surrogateInstanceId, ObjectParameter result)
        {
            var instanceIdParameter = instanceId.HasValue ?
                new ObjectParameter("instanceId", instanceId) :
                new ObjectParameter("instanceId", typeof(System.Guid));
    
            var surrogateLockOwnerIdParameter = surrogateLockOwnerId.HasValue ?
                new ObjectParameter("surrogateLockOwnerId", surrogateLockOwnerId) :
                new ObjectParameter("surrogateLockOwnerId", typeof(long));
    
            var workflowHostTypeParameter = workflowHostType.HasValue ?
                new ObjectParameter("workflowHostType", workflowHostType) :
                new ObjectParameter("workflowHostType", typeof(System.Guid));
    
            var serviceDeploymentIdParameter = serviceDeploymentId.HasValue ?
                new ObjectParameter("serviceDeploymentId", serviceDeploymentId) :
                new ObjectParameter("serviceDeploymentId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("CreateInstance", instanceIdParameter, surrogateLockOwnerIdParameter, workflowHostTypeParameter, serviceDeploymentIdParameter, surrogateInstanceId, result);
        }
    
        public virtual ObjectResult<Nullable<int>> CreateLockOwner(Nullable<System.Guid> lockOwnerId, Nullable<int> lockTimeout, Nullable<System.Guid> workflowHostType, Nullable<bool> enqueueCommand, Nullable<bool> deleteInstanceOnCompletion, byte[] primitiveLockOwnerData, byte[] complexLockOwnerData, byte[] writeOnlyPrimitiveLockOwnerData, byte[] writeOnlyComplexLockOwnerData, Nullable<byte> encodingOption, string machineName)
        {
            var lockOwnerIdParameter = lockOwnerId.HasValue ?
                new ObjectParameter("lockOwnerId", lockOwnerId) :
                new ObjectParameter("lockOwnerId", typeof(System.Guid));
    
            var lockTimeoutParameter = lockTimeout.HasValue ?
                new ObjectParameter("lockTimeout", lockTimeout) :
                new ObjectParameter("lockTimeout", typeof(int));
    
            var workflowHostTypeParameter = workflowHostType.HasValue ?
                new ObjectParameter("workflowHostType", workflowHostType) :
                new ObjectParameter("workflowHostType", typeof(System.Guid));
    
            var enqueueCommandParameter = enqueueCommand.HasValue ?
                new ObjectParameter("enqueueCommand", enqueueCommand) :
                new ObjectParameter("enqueueCommand", typeof(bool));
    
            var deleteInstanceOnCompletionParameter = deleteInstanceOnCompletion.HasValue ?
                new ObjectParameter("deleteInstanceOnCompletion", deleteInstanceOnCompletion) :
                new ObjectParameter("deleteInstanceOnCompletion", typeof(bool));
    
            var primitiveLockOwnerDataParameter = primitiveLockOwnerData != null ?
                new ObjectParameter("primitiveLockOwnerData", primitiveLockOwnerData) :
                new ObjectParameter("primitiveLockOwnerData", typeof(byte[]));
    
            var complexLockOwnerDataParameter = complexLockOwnerData != null ?
                new ObjectParameter("complexLockOwnerData", complexLockOwnerData) :
                new ObjectParameter("complexLockOwnerData", typeof(byte[]));
    
            var writeOnlyPrimitiveLockOwnerDataParameter = writeOnlyPrimitiveLockOwnerData != null ?
                new ObjectParameter("writeOnlyPrimitiveLockOwnerData", writeOnlyPrimitiveLockOwnerData) :
                new ObjectParameter("writeOnlyPrimitiveLockOwnerData", typeof(byte[]));
    
            var writeOnlyComplexLockOwnerDataParameter = writeOnlyComplexLockOwnerData != null ?
                new ObjectParameter("writeOnlyComplexLockOwnerData", writeOnlyComplexLockOwnerData) :
                new ObjectParameter("writeOnlyComplexLockOwnerData", typeof(byte[]));
    
            var encodingOptionParameter = encodingOption.HasValue ?
                new ObjectParameter("encodingOption", encodingOption) :
                new ObjectParameter("encodingOption", typeof(byte));
    
            var machineNameParameter = machineName != null ?
                new ObjectParameter("machineName", machineName) :
                new ObjectParameter("machineName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("CreateLockOwner", lockOwnerIdParameter, lockTimeoutParameter, workflowHostTypeParameter, enqueueCommandParameter, deleteInstanceOnCompletionParameter, primitiveLockOwnerDataParameter, complexLockOwnerDataParameter, writeOnlyPrimitiveLockOwnerDataParameter, writeOnlyComplexLockOwnerDataParameter, encodingOptionParameter, machineNameParameter);
        }
    
        public virtual ObjectResult<CreateServiceDeployment_Result> CreateServiceDeployment(Nullable<System.Guid> serviceDeploymentHash, string siteName, string relativeServicePath, string relativeApplicationPath, string serviceName, string serviceNamespace, ObjectParameter serviceDeploymentId)
        {
            var serviceDeploymentHashParameter = serviceDeploymentHash.HasValue ?
                new ObjectParameter("serviceDeploymentHash", serviceDeploymentHash) :
                new ObjectParameter("serviceDeploymentHash", typeof(System.Guid));
    
            var siteNameParameter = siteName != null ?
                new ObjectParameter("siteName", siteName) :
                new ObjectParameter("siteName", typeof(string));
    
            var relativeServicePathParameter = relativeServicePath != null ?
                new ObjectParameter("relativeServicePath", relativeServicePath) :
                new ObjectParameter("relativeServicePath", typeof(string));
    
            var relativeApplicationPathParameter = relativeApplicationPath != null ?
                new ObjectParameter("relativeApplicationPath", relativeApplicationPath) :
                new ObjectParameter("relativeApplicationPath", typeof(string));
    
            var serviceNameParameter = serviceName != null ?
                new ObjectParameter("serviceName", serviceName) :
                new ObjectParameter("serviceName", typeof(string));
    
            var serviceNamespaceParameter = serviceNamespace != null ?
                new ObjectParameter("serviceNamespace", serviceNamespace) :
                new ObjectParameter("serviceNamespace", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CreateServiceDeployment_Result>("CreateServiceDeployment", serviceDeploymentHashParameter, siteNameParameter, relativeServicePathParameter, relativeApplicationPathParameter, serviceNameParameter, serviceNamespaceParameter, serviceDeploymentId);
        }
    
        public virtual int DeleteInstance(Nullable<long> surrogateInstanceId)
        {
            var surrogateInstanceIdParameter = surrogateInstanceId.HasValue ?
                new ObjectParameter("surrogateInstanceId", surrogateInstanceId) :
                new ObjectParameter("surrogateInstanceId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteInstance", surrogateInstanceIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> DeleteLockOwner(Nullable<long> surrogateLockOwnerId)
        {
            var surrogateLockOwnerIdParameter = surrogateLockOwnerId.HasValue ?
                new ObjectParameter("surrogateLockOwnerId", surrogateLockOwnerId) :
                new ObjectParameter("surrogateLockOwnerId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("DeleteLockOwner", surrogateLockOwnerIdParameter);
        }
    
        public virtual ObjectResult<DetectRunnableInstances_Result> DetectRunnableInstances(Nullable<System.Guid> workflowHostType)
        {
            var workflowHostTypeParameter = workflowHostType.HasValue ?
                new ObjectParameter("workflowHostType", workflowHostType) :
                new ObjectParameter("workflowHostType", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DetectRunnableInstances_Result>("DetectRunnableInstances", workflowHostTypeParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> ExtendLock(Nullable<long> surrogateLockOwnerId, Nullable<int> lockTimeout)
        {
            var surrogateLockOwnerIdParameter = surrogateLockOwnerId.HasValue ?
                new ObjectParameter("surrogateLockOwnerId", surrogateLockOwnerId) :
                new ObjectParameter("surrogateLockOwnerId", typeof(long));
    
            var lockTimeoutParameter = lockTimeout.HasValue ?
                new ObjectParameter("lockTimeout", lockTimeout) :
                new ObjectParameter("lockTimeout", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("ExtendLock", surrogateLockOwnerIdParameter, lockTimeoutParameter);
        }
    
        public virtual ObjectResult<FreeKeys_Result> FreeKeys(Nullable<long> surrogateInstanceId, string keysToFree)
        {
            var surrogateInstanceIdParameter = surrogateInstanceId.HasValue ?
                new ObjectParameter("surrogateInstanceId", surrogateInstanceId) :
                new ObjectParameter("surrogateInstanceId", typeof(long));
    
            var keysToFreeParameter = keysToFree != null ?
                new ObjectParameter("keysToFree", keysToFree) :
                new ObjectParameter("keysToFree", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FreeKeys_Result>("FreeKeys", surrogateInstanceIdParameter, keysToFreeParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> GetActivatableWorkflowsActivationParameters(string machineName)
        {
            var machineNameParameter = machineName != null ?
                new ObjectParameter("machineName", machineName) :
                new ObjectParameter("machineName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetActivatableWorkflowsActivationParameters", machineNameParameter);
        }
    
        public virtual int InsertPromotedProperties(Nullable<System.Guid> instanceId, string promotionName, byte[] value33, byte[] value34, byte[] value35, byte[] value36, byte[] value37, byte[] value38, byte[] value39, byte[] value40, byte[] value41, byte[] value42, byte[] value43, byte[] value44, byte[] value45, byte[] value46, byte[] value47, byte[] value48, byte[] value49, byte[] value50, byte[] value51, byte[] value52, byte[] value53, byte[] value54, byte[] value55, byte[] value56, byte[] value57, byte[] value58, byte[] value59, byte[] value60, byte[] value61, byte[] value62, byte[] value63, byte[] value64)
        {
            var instanceIdParameter = instanceId.HasValue ?
                new ObjectParameter("instanceId", instanceId) :
                new ObjectParameter("instanceId", typeof(System.Guid));
    
            var promotionNameParameter = promotionName != null ?
                new ObjectParameter("promotionName", promotionName) :
                new ObjectParameter("promotionName", typeof(string));
    
            var value33Parameter = value33 != null ?
                new ObjectParameter("value33", value33) :
                new ObjectParameter("value33", typeof(byte[]));
    
            var value34Parameter = value34 != null ?
                new ObjectParameter("value34", value34) :
                new ObjectParameter("value34", typeof(byte[]));
    
            var value35Parameter = value35 != null ?
                new ObjectParameter("value35", value35) :
                new ObjectParameter("value35", typeof(byte[]));
    
            var value36Parameter = value36 != null ?
                new ObjectParameter("value36", value36) :
                new ObjectParameter("value36", typeof(byte[]));
    
            var value37Parameter = value37 != null ?
                new ObjectParameter("value37", value37) :
                new ObjectParameter("value37", typeof(byte[]));
    
            var value38Parameter = value38 != null ?
                new ObjectParameter("value38", value38) :
                new ObjectParameter("value38", typeof(byte[]));
    
            var value39Parameter = value39 != null ?
                new ObjectParameter("value39", value39) :
                new ObjectParameter("value39", typeof(byte[]));
    
            var value40Parameter = value40 != null ?
                new ObjectParameter("value40", value40) :
                new ObjectParameter("value40", typeof(byte[]));
    
            var value41Parameter = value41 != null ?
                new ObjectParameter("value41", value41) :
                new ObjectParameter("value41", typeof(byte[]));
    
            var value42Parameter = value42 != null ?
                new ObjectParameter("value42", value42) :
                new ObjectParameter("value42", typeof(byte[]));
    
            var value43Parameter = value43 != null ?
                new ObjectParameter("value43", value43) :
                new ObjectParameter("value43", typeof(byte[]));
    
            var value44Parameter = value44 != null ?
                new ObjectParameter("value44", value44) :
                new ObjectParameter("value44", typeof(byte[]));
    
            var value45Parameter = value45 != null ?
                new ObjectParameter("value45", value45) :
                new ObjectParameter("value45", typeof(byte[]));
    
            var value46Parameter = value46 != null ?
                new ObjectParameter("value46", value46) :
                new ObjectParameter("value46", typeof(byte[]));
    
            var value47Parameter = value47 != null ?
                new ObjectParameter("value47", value47) :
                new ObjectParameter("value47", typeof(byte[]));
    
            var value48Parameter = value48 != null ?
                new ObjectParameter("value48", value48) :
                new ObjectParameter("value48", typeof(byte[]));
    
            var value49Parameter = value49 != null ?
                new ObjectParameter("value49", value49) :
                new ObjectParameter("value49", typeof(byte[]));
    
            var value50Parameter = value50 != null ?
                new ObjectParameter("value50", value50) :
                new ObjectParameter("value50", typeof(byte[]));
    
            var value51Parameter = value51 != null ?
                new ObjectParameter("value51", value51) :
                new ObjectParameter("value51", typeof(byte[]));
    
            var value52Parameter = value52 != null ?
                new ObjectParameter("value52", value52) :
                new ObjectParameter("value52", typeof(byte[]));
    
            var value53Parameter = value53 != null ?
                new ObjectParameter("value53", value53) :
                new ObjectParameter("value53", typeof(byte[]));
    
            var value54Parameter = value54 != null ?
                new ObjectParameter("value54", value54) :
                new ObjectParameter("value54", typeof(byte[]));
    
            var value55Parameter = value55 != null ?
                new ObjectParameter("value55", value55) :
                new ObjectParameter("value55", typeof(byte[]));
    
            var value56Parameter = value56 != null ?
                new ObjectParameter("value56", value56) :
                new ObjectParameter("value56", typeof(byte[]));
    
            var value57Parameter = value57 != null ?
                new ObjectParameter("value57", value57) :
                new ObjectParameter("value57", typeof(byte[]));
    
            var value58Parameter = value58 != null ?
                new ObjectParameter("value58", value58) :
                new ObjectParameter("value58", typeof(byte[]));
    
            var value59Parameter = value59 != null ?
                new ObjectParameter("value59", value59) :
                new ObjectParameter("value59", typeof(byte[]));
    
            var value60Parameter = value60 != null ?
                new ObjectParameter("value60", value60) :
                new ObjectParameter("value60", typeof(byte[]));
    
            var value61Parameter = value61 != null ?
                new ObjectParameter("value61", value61) :
                new ObjectParameter("value61", typeof(byte[]));
    
            var value62Parameter = value62 != null ?
                new ObjectParameter("value62", value62) :
                new ObjectParameter("value62", typeof(byte[]));
    
            var value63Parameter = value63 != null ?
                new ObjectParameter("value63", value63) :
                new ObjectParameter("value63", typeof(byte[]));
    
            var value64Parameter = value64 != null ?
                new ObjectParameter("value64", value64) :
                new ObjectParameter("value64", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertPromotedProperties", instanceIdParameter, promotionNameParameter, value33Parameter, value34Parameter, value35Parameter, value36Parameter, value37Parameter, value38Parameter, value39Parameter, value40Parameter, value41Parameter, value42Parameter, value43Parameter, value44Parameter, value45Parameter, value46Parameter, value47Parameter, value48Parameter, value49Parameter, value50Parameter, value51Parameter, value52Parameter, value53Parameter, value54Parameter, value55Parameter, value56Parameter, value57Parameter, value58Parameter, value59Parameter, value60Parameter, value61Parameter, value62Parameter, value63Parameter, value64Parameter);
        }
    
        public virtual int InsertRunnableInstanceEntry(Nullable<long> surrogateInstanceId, Nullable<System.Guid> workflowHostType, Nullable<long> serviceDeploymentId, Nullable<bool> isSuspended, Nullable<bool> isReadyToRun, Nullable<System.DateTime> pendingTimer)
        {
            var surrogateInstanceIdParameter = surrogateInstanceId.HasValue ?
                new ObjectParameter("surrogateInstanceId", surrogateInstanceId) :
                new ObjectParameter("surrogateInstanceId", typeof(long));
    
            var workflowHostTypeParameter = workflowHostType.HasValue ?
                new ObjectParameter("workflowHostType", workflowHostType) :
                new ObjectParameter("workflowHostType", typeof(System.Guid));
    
            var serviceDeploymentIdParameter = serviceDeploymentId.HasValue ?
                new ObjectParameter("serviceDeploymentId", serviceDeploymentId) :
                new ObjectParameter("serviceDeploymentId", typeof(long));
    
            var isSuspendedParameter = isSuspended.HasValue ?
                new ObjectParameter("isSuspended", isSuspended) :
                new ObjectParameter("isSuspended", typeof(bool));
    
            var isReadyToRunParameter = isReadyToRun.HasValue ?
                new ObjectParameter("isReadyToRun", isReadyToRun) :
                new ObjectParameter("isReadyToRun", typeof(bool));
    
            var pendingTimerParameter = pendingTimer.HasValue ?
                new ObjectParameter("pendingTimer", pendingTimer) :
                new ObjectParameter("pendingTimer", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertRunnableInstanceEntry", surrogateInstanceIdParameter, workflowHostTypeParameter, serviceDeploymentIdParameter, isSuspendedParameter, isReadyToRunParameter, pendingTimerParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> LoadInstance(Nullable<long> surrogateLockOwnerId, Nullable<byte> operationType, Nullable<long> handleInstanceVersion, Nullable<bool> handleIsBoundToLock, Nullable<System.Guid> keyToLoadBy, Nullable<System.Guid> instanceId, string keysToAssociate, Nullable<byte> encodingOption, byte[] concatenatedKeyProperties, Nullable<System.Guid> singleKeyId, Nullable<int> operationTimeout)
        {
            var surrogateLockOwnerIdParameter = surrogateLockOwnerId.HasValue ?
                new ObjectParameter("surrogateLockOwnerId", surrogateLockOwnerId) :
                new ObjectParameter("surrogateLockOwnerId", typeof(long));
    
            var operationTypeParameter = operationType.HasValue ?
                new ObjectParameter("operationType", operationType) :
                new ObjectParameter("operationType", typeof(byte));
    
            var handleInstanceVersionParameter = handleInstanceVersion.HasValue ?
                new ObjectParameter("handleInstanceVersion", handleInstanceVersion) :
                new ObjectParameter("handleInstanceVersion", typeof(long));
    
            var handleIsBoundToLockParameter = handleIsBoundToLock.HasValue ?
                new ObjectParameter("handleIsBoundToLock", handleIsBoundToLock) :
                new ObjectParameter("handleIsBoundToLock", typeof(bool));
    
            var keyToLoadByParameter = keyToLoadBy.HasValue ?
                new ObjectParameter("keyToLoadBy", keyToLoadBy) :
                new ObjectParameter("keyToLoadBy", typeof(System.Guid));
    
            var instanceIdParameter = instanceId.HasValue ?
                new ObjectParameter("instanceId", instanceId) :
                new ObjectParameter("instanceId", typeof(System.Guid));
    
            var keysToAssociateParameter = keysToAssociate != null ?
                new ObjectParameter("keysToAssociate", keysToAssociate) :
                new ObjectParameter("keysToAssociate", typeof(string));
    
            var encodingOptionParameter = encodingOption.HasValue ?
                new ObjectParameter("encodingOption", encodingOption) :
                new ObjectParameter("encodingOption", typeof(byte));
    
            var concatenatedKeyPropertiesParameter = concatenatedKeyProperties != null ?
                new ObjectParameter("concatenatedKeyProperties", concatenatedKeyProperties) :
                new ObjectParameter("concatenatedKeyProperties", typeof(byte[]));
    
            var singleKeyIdParameter = singleKeyId.HasValue ?
                new ObjectParameter("singleKeyId", singleKeyId) :
                new ObjectParameter("singleKeyId", typeof(System.Guid));
    
            var operationTimeoutParameter = operationTimeout.HasValue ?
                new ObjectParameter("operationTimeout", operationTimeout) :
                new ObjectParameter("operationTimeout", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("LoadInstance", surrogateLockOwnerIdParameter, operationTypeParameter, handleInstanceVersionParameter, handleIsBoundToLockParameter, keyToLoadByParameter, instanceIdParameter, keysToAssociateParameter, encodingOptionParameter, concatenatedKeyPropertiesParameter, singleKeyIdParameter, operationTimeoutParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> LockInstance(Nullable<System.Guid> instanceId, Nullable<long> surrogateLockOwnerId, Nullable<long> handleInstanceVersion, Nullable<bool> handleIsBoundToLock, ObjectParameter surrogateInstanceId, ObjectParameter lockVersion, ObjectParameter result)
        {
            var instanceIdParameter = instanceId.HasValue ?
                new ObjectParameter("instanceId", instanceId) :
                new ObjectParameter("instanceId", typeof(System.Guid));
    
            var surrogateLockOwnerIdParameter = surrogateLockOwnerId.HasValue ?
                new ObjectParameter("surrogateLockOwnerId", surrogateLockOwnerId) :
                new ObjectParameter("surrogateLockOwnerId", typeof(long));
    
            var handleInstanceVersionParameter = handleInstanceVersion.HasValue ?
                new ObjectParameter("handleInstanceVersion", handleInstanceVersion) :
                new ObjectParameter("handleInstanceVersion", typeof(long));
    
            var handleIsBoundToLockParameter = handleIsBoundToLock.HasValue ?
                new ObjectParameter("handleIsBoundToLock", handleIsBoundToLock) :
                new ObjectParameter("handleIsBoundToLock", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("LockInstance", instanceIdParameter, surrogateLockOwnerIdParameter, handleInstanceVersionParameter, handleIsBoundToLockParameter, surrogateInstanceId, lockVersion, result);
        }
    
        public virtual int RecoverInstanceLocks()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RecoverInstanceLocks");
        }
    
        public virtual int SaveInstance(Nullable<System.Guid> instanceId, Nullable<long> surrogateLockOwnerId, Nullable<long> handleInstanceVersion, Nullable<bool> handleIsBoundToLock, byte[] primitiveDataProperties, byte[] complexDataProperties, byte[] writeOnlyPrimitiveDataProperties, byte[] writeOnlyComplexDataProperties, byte[] metadataProperties, Nullable<bool> metadataIsConsistent, Nullable<byte> encodingOption, Nullable<long> timerDurationMilliseconds, Nullable<byte> suspensionStateChange, string suspensionReason, string suspensionExceptionName, string keysToAssociate, string keysToComplete, string keysToFree, byte[] concatenatedKeyProperties, Nullable<bool> unlockInstance, Nullable<bool> isReadyToRun, Nullable<bool> isCompleted, Nullable<System.Guid> singleKeyId, string lastMachineRunOn, string executionStatus, string blockingBookmarks, Nullable<System.Guid> workflowHostType, Nullable<long> serviceDeploymentId, Nullable<int> operationTimeout)
        {
            var instanceIdParameter = instanceId.HasValue ?
                new ObjectParameter("instanceId", instanceId) :
                new ObjectParameter("instanceId", typeof(System.Guid));
    
            var surrogateLockOwnerIdParameter = surrogateLockOwnerId.HasValue ?
                new ObjectParameter("surrogateLockOwnerId", surrogateLockOwnerId) :
                new ObjectParameter("surrogateLockOwnerId", typeof(long));
    
            var handleInstanceVersionParameter = handleInstanceVersion.HasValue ?
                new ObjectParameter("handleInstanceVersion", handleInstanceVersion) :
                new ObjectParameter("handleInstanceVersion", typeof(long));
    
            var handleIsBoundToLockParameter = handleIsBoundToLock.HasValue ?
                new ObjectParameter("handleIsBoundToLock", handleIsBoundToLock) :
                new ObjectParameter("handleIsBoundToLock", typeof(bool));
    
            var primitiveDataPropertiesParameter = primitiveDataProperties != null ?
                new ObjectParameter("primitiveDataProperties", primitiveDataProperties) :
                new ObjectParameter("primitiveDataProperties", typeof(byte[]));
    
            var complexDataPropertiesParameter = complexDataProperties != null ?
                new ObjectParameter("complexDataProperties", complexDataProperties) :
                new ObjectParameter("complexDataProperties", typeof(byte[]));
    
            var writeOnlyPrimitiveDataPropertiesParameter = writeOnlyPrimitiveDataProperties != null ?
                new ObjectParameter("writeOnlyPrimitiveDataProperties", writeOnlyPrimitiveDataProperties) :
                new ObjectParameter("writeOnlyPrimitiveDataProperties", typeof(byte[]));
    
            var writeOnlyComplexDataPropertiesParameter = writeOnlyComplexDataProperties != null ?
                new ObjectParameter("writeOnlyComplexDataProperties", writeOnlyComplexDataProperties) :
                new ObjectParameter("writeOnlyComplexDataProperties", typeof(byte[]));
    
            var metadataPropertiesParameter = metadataProperties != null ?
                new ObjectParameter("metadataProperties", metadataProperties) :
                new ObjectParameter("metadataProperties", typeof(byte[]));
    
            var metadataIsConsistentParameter = metadataIsConsistent.HasValue ?
                new ObjectParameter("metadataIsConsistent", metadataIsConsistent) :
                new ObjectParameter("metadataIsConsistent", typeof(bool));
    
            var encodingOptionParameter = encodingOption.HasValue ?
                new ObjectParameter("encodingOption", encodingOption) :
                new ObjectParameter("encodingOption", typeof(byte));
    
            var timerDurationMillisecondsParameter = timerDurationMilliseconds.HasValue ?
                new ObjectParameter("timerDurationMilliseconds", timerDurationMilliseconds) :
                new ObjectParameter("timerDurationMilliseconds", typeof(long));
    
            var suspensionStateChangeParameter = suspensionStateChange.HasValue ?
                new ObjectParameter("suspensionStateChange", suspensionStateChange) :
                new ObjectParameter("suspensionStateChange", typeof(byte));
    
            var suspensionReasonParameter = suspensionReason != null ?
                new ObjectParameter("suspensionReason", suspensionReason) :
                new ObjectParameter("suspensionReason", typeof(string));
    
            var suspensionExceptionNameParameter = suspensionExceptionName != null ?
                new ObjectParameter("suspensionExceptionName", suspensionExceptionName) :
                new ObjectParameter("suspensionExceptionName", typeof(string));
    
            var keysToAssociateParameter = keysToAssociate != null ?
                new ObjectParameter("keysToAssociate", keysToAssociate) :
                new ObjectParameter("keysToAssociate", typeof(string));
    
            var keysToCompleteParameter = keysToComplete != null ?
                new ObjectParameter("keysToComplete", keysToComplete) :
                new ObjectParameter("keysToComplete", typeof(string));
    
            var keysToFreeParameter = keysToFree != null ?
                new ObjectParameter("keysToFree", keysToFree) :
                new ObjectParameter("keysToFree", typeof(string));
    
            var concatenatedKeyPropertiesParameter = concatenatedKeyProperties != null ?
                new ObjectParameter("concatenatedKeyProperties", concatenatedKeyProperties) :
                new ObjectParameter("concatenatedKeyProperties", typeof(byte[]));
    
            var unlockInstanceParameter = unlockInstance.HasValue ?
                new ObjectParameter("unlockInstance", unlockInstance) :
                new ObjectParameter("unlockInstance", typeof(bool));
    
            var isReadyToRunParameter = isReadyToRun.HasValue ?
                new ObjectParameter("isReadyToRun", isReadyToRun) :
                new ObjectParameter("isReadyToRun", typeof(bool));
    
            var isCompletedParameter = isCompleted.HasValue ?
                new ObjectParameter("isCompleted", isCompleted) :
                new ObjectParameter("isCompleted", typeof(bool));
    
            var singleKeyIdParameter = singleKeyId.HasValue ?
                new ObjectParameter("singleKeyId", singleKeyId) :
                new ObjectParameter("singleKeyId", typeof(System.Guid));
    
            var lastMachineRunOnParameter = lastMachineRunOn != null ?
                new ObjectParameter("lastMachineRunOn", lastMachineRunOn) :
                new ObjectParameter("lastMachineRunOn", typeof(string));
    
            var executionStatusParameter = executionStatus != null ?
                new ObjectParameter("executionStatus", executionStatus) :
                new ObjectParameter("executionStatus", typeof(string));
    
            var blockingBookmarksParameter = blockingBookmarks != null ?
                new ObjectParameter("blockingBookmarks", blockingBookmarks) :
                new ObjectParameter("blockingBookmarks", typeof(string));
    
            var workflowHostTypeParameter = workflowHostType.HasValue ?
                new ObjectParameter("workflowHostType", workflowHostType) :
                new ObjectParameter("workflowHostType", typeof(System.Guid));
    
            var serviceDeploymentIdParameter = serviceDeploymentId.HasValue ?
                new ObjectParameter("serviceDeploymentId", serviceDeploymentId) :
                new ObjectParameter("serviceDeploymentId", typeof(long));
    
            var operationTimeoutParameter = operationTimeout.HasValue ?
                new ObjectParameter("operationTimeout", operationTimeout) :
                new ObjectParameter("operationTimeout", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SaveInstance", instanceIdParameter, surrogateLockOwnerIdParameter, handleInstanceVersionParameter, handleIsBoundToLockParameter, primitiveDataPropertiesParameter, complexDataPropertiesParameter, writeOnlyPrimitiveDataPropertiesParameter, writeOnlyComplexDataPropertiesParameter, metadataPropertiesParameter, metadataIsConsistentParameter, encodingOptionParameter, timerDurationMillisecondsParameter, suspensionStateChangeParameter, suspensionReasonParameter, suspensionExceptionNameParameter, keysToAssociateParameter, keysToCompleteParameter, keysToFreeParameter, concatenatedKeyPropertiesParameter, unlockInstanceParameter, isReadyToRunParameter, isCompletedParameter, singleKeyIdParameter, lastMachineRunOnParameter, executionStatusParameter, blockingBookmarksParameter, workflowHostTypeParameter, serviceDeploymentIdParameter, operationTimeoutParameter);
        }
    
        public virtual ObjectResult<TryLoadRunnableInstance_Result> TryLoadRunnableInstance(Nullable<long> surrogateLockOwnerId, Nullable<System.Guid> workflowHostType, Nullable<byte> operationType, Nullable<long> handleInstanceVersion, Nullable<bool> handleIsBoundToLock, Nullable<byte> encodingOption, Nullable<int> operationTimeout)
        {
            var surrogateLockOwnerIdParameter = surrogateLockOwnerId.HasValue ?
                new ObjectParameter("surrogateLockOwnerId", surrogateLockOwnerId) :
                new ObjectParameter("surrogateLockOwnerId", typeof(long));
    
            var workflowHostTypeParameter = workflowHostType.HasValue ?
                new ObjectParameter("workflowHostType", workflowHostType) :
                new ObjectParameter("workflowHostType", typeof(System.Guid));
    
            var operationTypeParameter = operationType.HasValue ?
                new ObjectParameter("operationType", operationType) :
                new ObjectParameter("operationType", typeof(byte));
    
            var handleInstanceVersionParameter = handleInstanceVersion.HasValue ?
                new ObjectParameter("handleInstanceVersion", handleInstanceVersion) :
                new ObjectParameter("handleInstanceVersion", typeof(long));
    
            var handleIsBoundToLockParameter = handleIsBoundToLock.HasValue ?
                new ObjectParameter("handleIsBoundToLock", handleIsBoundToLock) :
                new ObjectParameter("handleIsBoundToLock", typeof(bool));
    
            var encodingOptionParameter = encodingOption.HasValue ?
                new ObjectParameter("encodingOption", encodingOption) :
                new ObjectParameter("encodingOption", typeof(byte));
    
            var operationTimeoutParameter = operationTimeout.HasValue ?
                new ObjectParameter("operationTimeout", operationTimeout) :
                new ObjectParameter("operationTimeout", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TryLoadRunnableInstance_Result>("TryLoadRunnableInstance", surrogateLockOwnerIdParameter, workflowHostTypeParameter, operationTypeParameter, handleInstanceVersionParameter, handleIsBoundToLockParameter, encodingOptionParameter, operationTimeoutParameter);
        }
    
        public virtual int UnlockInstance(Nullable<long> surrogateLockOwnerId, Nullable<System.Guid> instanceId, Nullable<long> handleInstanceVersion)
        {
            var surrogateLockOwnerIdParameter = surrogateLockOwnerId.HasValue ?
                new ObjectParameter("surrogateLockOwnerId", surrogateLockOwnerId) :
                new ObjectParameter("surrogateLockOwnerId", typeof(long));
    
            var instanceIdParameter = instanceId.HasValue ?
                new ObjectParameter("instanceId", instanceId) :
                new ObjectParameter("instanceId", typeof(System.Guid));
    
            var handleInstanceVersionParameter = handleInstanceVersion.HasValue ?
                new ObjectParameter("handleInstanceVersion", handleInstanceVersion) :
                new ObjectParameter("handleInstanceVersion", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UnlockInstance", surrogateLockOwnerIdParameter, instanceIdParameter, handleInstanceVersionParameter);
        }
    
        public virtual int AddDependency(Nullable<int> id, Nullable<int> targetID, string action, string condition)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var targetIDParameter = targetID.HasValue ?
                new ObjectParameter("TargetID", targetID) :
                new ObjectParameter("TargetID", typeof(int));
    
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var conditionParameter = condition != null ?
                new ObjectParameter("Condition", condition) :
                new ObjectParameter("Condition", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddDependency", idParameter, targetIDParameter, actionParameter, conditionParameter);
        }
    
        public virtual int AddDependencyEx(Nullable<int> id, Nullable<int> targetId, string action, string condition, string pName, string pValue)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var targetIdParameter = targetId.HasValue ?
                new ObjectParameter("TargetId", targetId) :
                new ObjectParameter("TargetId", typeof(int));
    
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var conditionParameter = condition != null ?
                new ObjectParameter("Condition", condition) :
                new ObjectParameter("Condition", typeof(string));
    
            var pNameParameter = pName != null ?
                new ObjectParameter("PName", pName) :
                new ObjectParameter("PName", typeof(string));
    
            var pValueParameter = pValue != null ?
                new ObjectParameter("PValue", pValue) :
                new ObjectParameter("PValue", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddDependencyEx", idParameter, targetIdParameter, actionParameter, conditionParameter, pNameParameter, pValueParameter);
        }
    
        public virtual int AddElement(Nullable<int> id, string type, string control, string name, Nullable<int> parentId, Nullable<int> row)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var controlParameter = control != null ?
                new ObjectParameter("Control", control) :
                new ObjectParameter("Control", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var parentIdParameter = parentId.HasValue ?
                new ObjectParameter("ParentId", parentId) :
                new ObjectParameter("ParentId", typeof(int));
    
            var rowParameter = row.HasValue ?
                new ObjectParameter("Row", row) :
                new ObjectParameter("Row", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddElement", idParameter, typeParameter, controlParameter, nameParameter, parentIdParameter, rowParameter);
        }
    
        public virtual int AddElementEx(Nullable<int> id, string type, string control, string name, Nullable<int> parentId, Nullable<int> row, Nullable<int> column)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var controlParameter = control != null ?
                new ObjectParameter("Control", control) :
                new ObjectParameter("Control", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var parentIdParameter = parentId.HasValue ?
                new ObjectParameter("ParentId", parentId) :
                new ObjectParameter("ParentId", typeof(int));
    
            var rowParameter = row.HasValue ?
                new ObjectParameter("Row", row) :
                new ObjectParameter("Row", typeof(int));
    
            var columnParameter = column.HasValue ?
                new ObjectParameter("Column", column) :
                new ObjectParameter("Column", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddElementEx", idParameter, typeParameter, controlParameter, nameParameter, parentIdParameter, rowParameter, columnParameter);
        }
    
        public virtual int AddProperty(Nullable<int> id, string name, string value)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var valueParameter = value != null ?
                new ObjectParameter("Value", value) :
                new ObjectParameter("Value", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddProperty", idParameter, nameParameter, valueParameter);
        }
    
        public virtual int AddRule(Nullable<int> id, string validator)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var validatorParameter = validator != null ?
                new ObjectParameter("Validator", validator) :
                new ObjectParameter("Validator", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddRule", idParameter, validatorParameter);
        }
    
        public virtual int AddRuleEx(Nullable<int> id, string validator, string pCode, string pValue)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var validatorParameter = validator != null ?
                new ObjectParameter("Validator", validator) :
                new ObjectParameter("Validator", typeof(string));
    
            var pCodeParameter = pCode != null ?
                new ObjectParameter("PCode", pCode) :
                new ObjectParameter("PCode", typeof(string));
    
            var pValueParameter = pValue != null ?
                new ObjectParameter("PValue", pValue) :
                new ObjectParameter("PValue", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddRuleEx", idParameter, validatorParameter, pCodeParameter, pValueParameter);
        }
    
        public virtual int AddRuleEx2(Nullable<int> id, string validator, string pCode, string pValue, string pCode2, string pValue2)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var validatorParameter = validator != null ?
                new ObjectParameter("Validator", validator) :
                new ObjectParameter("Validator", typeof(string));
    
            var pCodeParameter = pCode != null ?
                new ObjectParameter("PCode", pCode) :
                new ObjectParameter("PCode", typeof(string));
    
            var pValueParameter = pValue != null ?
                new ObjectParameter("PValue", pValue) :
                new ObjectParameter("PValue", typeof(string));
    
            var pCode2Parameter = pCode2 != null ?
                new ObjectParameter("PCode2", pCode2) :
                new ObjectParameter("PCode2", typeof(string));
    
            var pValue2Parameter = pValue2 != null ?
                new ObjectParameter("PValue2", pValue2) :
                new ObjectParameter("PValue2", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddRuleEx2", idParameter, validatorParameter, pCodeParameter, pValueParameter, pCode2Parameter, pValue2Parameter);
        }
    
        public virtual int PopulateFlowEngineLookups()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PopulateFlowEngineLookups");
        }
    }
}
